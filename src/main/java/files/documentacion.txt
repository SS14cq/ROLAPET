

===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/constructor/ControladorRegistro.java =====

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package udistrital.avanzada.rolapet.constructor;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JOptionPane;
import udistrital.avanzada.rolapet.modelo.Usuario;
import udistrital.avanzada.rolapet.vista.FormularioRegistro;


/**
 * Controlador que gestiona las interacciones entre la vista del formulario de registro
 * y el gestor de usuarios. Maneja eventos del formulario para registrar usuarios nuevos.
 * 
 * @author sarita
 * @version 1.0, 21-09-2025
 */
/**
 * Class ControladorRegistro.
 */
/**
 * Class ControladorRegistro.
 */
public class ControladorRegistro implements ActionListener {

    private FormularioRegistro vista;
    private GestorUsuario gestor;
    
    /**
     * Crea un controlador vinculado a una vista y un gestor de usuarios específicos.
     * Asocia el listener al botón Registrar del formulario.
     * 
     * @param vista Vista del formulario de registro.
     * @param gestor Gestor que administra el registro de usuarios.
     */
    public ControladorRegistro(FormularioRegistro vista, GestorUsuario gestor) {
        this.vista = vista;
        this.gestor = gestor;
        this.vista.getBtnRegistrar().addActionListener(this);
    }

    @Override
/**
 * actionPerformed method.
 * @param e parameter
 * @return result
 */
/**
 * actionPerformed method.
 * @param e parameter
 */
/**
 * actionPerformed method.
 * @param e parameter
 */
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == vista.getBtnRegistrar()) {
            registrarUsuario();
        }
    }

    /**
     * Recopila los datos del formulario, valida campos obligatorios,
     * intenta registrar un nuevo usuario y muestra mensajes al usuario.
     */
/**
 * registrarUsuario method.
 * @return result
 */
/**
 * registrarUsuario method.
 */
/**
 * registrarUsuario method.
 */
    private void registrarUsuario() {
        String nombre = vista.getNombre();
        String apellido = vista.getApellido();
        String cedula = vista.getCedula();
        String correo = vista.getCorreo();
        String celular = vista.getCelular();
        String nombreUsuario = vista.getNombreUsuario();
        String contrasena = vista.getContrasena();

        if (nombre.isEmpty() || apellido.isEmpty() || cedula.isEmpty() || correo.isEmpty() ||
            celular.isEmpty() || nombreUsuario.isEmpty() || contrasena.isEmpty()) {
            JOptionPane.showMessageDialog(vista, "Por favor, complete todos los campos.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        Usuario usuario = new Usuario(nombre, apellido, cedula, correo, celular, nombreUsuario, contrasena) {};

        boolean registrado = gestor.registrarUsuario(usuario);
        if (registrado) {
            JOptionPane.showMessageDialog(vista, "Usuario registrado exitosamente.");
            vista.limpiarCampos();
        } else {
            JOptionPane.showMessageDialog(vista, "El nombre de usuario o la cédula ya están registrados.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
}



===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/constructor/ControladorUsuario.java =====

package udistrital.avanzada.rolapet.constructor;

import java.util.ArrayList;
import java.util.List;
import udistrital.avanzada.rolapet.modelo.Usuario;

/**
 * Clase ControladorUsuario.
 * Gestiona el registro y la búsqueda de usuarios en una lista interna.
 * Permite registrar nuevos usuarios evitando duplicados por nombre de usuario o cédula,
 * así como buscar usuarios por nombre de usuario o cédula.
 * 
 * @author sarita
 * @version 1.3, 25-09-2025
 */
/**
 * Class ControladorUsuario.
 */
/**
 * Class ControladorUsuario.
 */
public class ControladorUsuario {

    /**
     * Lista que almacena los usuarios registrados.
     */
    private List<Usuario> usuarios;

    /**
     * Constructor de ControladorUsuario.
     * Inicializa la lista interna de usuarios.
     */
    public ControladorUsuario() {
        usuarios = new ArrayList<>();
        // Usuario Sofia Castro
        Usuario sofia = new Usuario(
            "Sofia", // nombreUsuario
            "Sofia14@", // contraseña
            "Sofia", // nombre
            "Castro", // apellido
            "1011201454", // cedula
            "sscastroq@udistrital.edu.co", // correo
            "3177177162" // celular
        ) {};
        usuarios.add(sofia);
    }

    /**
     * Registra un nuevo usuario si no existe otro con el mismo nombre de usuario o cédula.
     * 
     * @param usuario Usuario a registrar.
     * @return true si el usuario se registró correctamente; false si ya existe por nombre o cédula.
     */
/**
 * registrarUsuario method.
 * @param usuario parameter
 * @return result
 */
/**
 * registrarUsuario method.
 * @param usuario parameter
 * @return result
 */
/**
 * registrarUsuario method.
 * @param usuario parameter
 * @return result
 */
    public boolean registrarUsuario(Usuario usuario) {
        if (buscarPorNombreUsuario(usuario.getNombreUsuario()) != null) {
            return false; // Ya existe usuario con ese nombre
        }
        if (buscarPorCedula(usuario.getCedula()) != null) {
            return false; // Ya existe usuario con esa cédula
        }
        usuarios.add(usuario);
        return true;
    }

    /**
     * Busca un usuario por su nombre de usuario (ignorando mayúsculas/minúsculas).
     * 
     * @param nombreUsuario Nombre de usuario a buscar.
     * @return Usuario encontrado o null si no existe.
     */
/**
 * buscarPorNombreUsuario method.
 * @param nombreUsuario parameter
 * @return result
 */
/**
 * buscarPorNombreUsuario method.
 * @param nombreUsuario parameter
 * @return result
 */
/**
 * buscarPorNombreUsuario method.
 * @param nombreUsuario parameter
 * @return result
 */
    public Usuario buscarPorNombreUsuario(String nombreUsuario) {
        for (Usuario u : usuarios) {
            if (u.getNombreUsuario().equalsIgnoreCase(nombreUsuario)) {
                return u;
            }
        }
        return null;
    }

    /**
     * Busca un usuario por su cédula (ignorando mayúsculas/minúsculas).
     * 
     * @param cedula Cédula a buscar.
     * @return Usuario encontrado o null si no existe.
     */
/**
 * buscarPorCedula method.
 * @param cedula parameter
 * @return result
 */
/**
 * buscarPorCedula method.
 * @param cedula parameter
 * @return result
 */
/**
 * buscarPorCedula method.
 * @param cedula parameter
 * @return result
 */
    public Usuario buscarPorCedula(String cedula) {
        for (Usuario u : usuarios) {
            if (u.getCedula().equalsIgnoreCase(cedula)) {
                return u;
            }
        }
        return null;
    }

    /**
     * Obtiene la lista completa de usuarios registrados.
     * 
     * @return Lista de usuarios.
     */
/**
 * obtenerUsuarios method.
 * @return result
 */
/**
 * obtenerUsuarios method.
 * @return result
 */
/**
 * obtenerUsuarios method.
 * @return result
 */
    public List<Usuario> obtenerUsuarios() {
        return usuarios;
    }
}


===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/constructor/ControladorVehiculo.java =====

package udistrital.avanzada.rolapet.constructor;

import udistrital.avanzada.rolapet.modelo.Vehiculo;

import java.util.ArrayList;
import java.util.List;

/**
 * Clase ControladorVehiculo que gestiona una colección de objetos Vehiculo.
 * Permite registrar nuevos vehículos, buscar vehículos por marca y modelo,
 * y obtener la lista completa de vehículos registrados.
 * <p>
 * Se asegura de no registrar vehículos duplicados basándose en la combinación
 * de marca y modelo.
 * </p>
 * 
 * @author Sarita
 * @version 1.2, 25-09-2025
 */
/**
 * Class ControladorVehiculo.
 */
/**
 * Class ControladorVehiculo.
 */
public class ControladorVehiculo {
    private List<Vehiculo> vehiculos;

    /**
     * Construye un nuevo controlador inicializando la lista interna de vehículos.
     */
    public ControladorVehiculo() {
        vehiculos = new ArrayList<>();
    }

    /**
     * Registra un vehículo si no existe ya en la lista.
     * El criterio de igualdad se basa en la combinación de marca y modelo,
     * sin distinguir mayúsculas o minúsculas.
     * 
     * @param vehiculo vehículo a registrar
     * @return true si se registró exitosamente, false si ya existe un vehículo
     *         con la misma marca y modelo
     */
/**
 * registrarVehiculo method.
 * @param vehiculo parameter
 * @return result
 */
/**
 * registrarVehiculo method.
 * @param vehiculo parameter
 * @return result
 */
/**
 * registrarVehiculo method.
 * @param vehiculo parameter
 * @return result
 */
    public boolean registrarVehiculo(Vehiculo vehiculo) {
        if (buscarVehiculo(vehiculo.getMarca(), vehiculo.getModelo()) != null) {
            return false; // vehículo ya existe
        }
        vehiculos.add(vehiculo);
        return true;
    }

    /**
     * Busca un vehículo por su marca y modelo.
     * La búsqueda no distingue entre mayúsculas y minúsculas.
     * 
     * @param marca  marca del vehículo a buscar
     * @param modelo modelo del vehículo a buscar
     * @return el Vehiculo encontrado o null si no existe ninguno con la marca y modelo indicados
     */
/**
 * buscarVehiculo method.
 * @param marca parameter
 * @param modelo parameter
 * @return result
 */
/**
 * buscarVehiculo method.
 * @param marca parameter
 * @param modelo parameter
 * @return result
 */
/**
 * buscarVehiculo method.
 * @param marca parameter
 * @param modelo parameter
 * @return result
 */
    public Vehiculo buscarVehiculo(String marca, String modelo) {
        for (Vehiculo v : vehiculos) {
            if (v.getMarca().equalsIgnoreCase(marca) && v.getModelo().equalsIgnoreCase(modelo)) {
                return v;
            }
        }
        return null;
    }

    /**
     * Obtiene la lista completa de vehículos registrados en el controlador.
     * 
     * @return lista de vehículos registrados
     */
/**
 * obtenerVehiculos method.
 * @return result
 */
/**
 * obtenerVehiculos method.
 * @return result
 */
/**
 * obtenerVehiculos method.
 * @return result
 */
    public List<Vehiculo> obtenerVehiculos() {
        return vehiculos;
    }
}


===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/constructor/GestorGestionItemsProveedor.java =====

package udistrital.avanzada.rolapet.constructor;

import udistrital.avanzada.rolapet.modelo.Item;
import udistrital.avanzada.rolapet.modelo.Proveedor;
import udistrital.avanzada.rolapet.vista.VentanaGestionItemsProveedor;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;

/**
 * Gestor para la ventana de gestión de ítems del proveedor.
 */
/**
 * Class GestorGestionItemsProveedor.
 */
/**
 * Class GestorGestionItemsProveedor.
 */
public class GestorGestionItemsProveedor implements ActionListener {
    private VentanaGestionItemsProveedor vista;
    private Proveedor proveedor;
    private IGestorProveedor gestorProveedor;

    public GestorGestionItemsProveedor(VentanaGestionItemsProveedor vista, Proveedor proveedor, IGestorProveedor gestorProveedor) {
        this.vista = vista;
        this.proveedor = proveedor;
        this.gestorProveedor = gestorProveedor;
        vista.getBtnCrear().addActionListener(this);
        vista.getBtnEditar().addActionListener(this);
        vista.getBtnEliminar().addActionListener(this);
        vista.getBtnCerrar().addActionListener(this);
    }

    @Override
/**
 * actionPerformed method.
 * @param e parameter
 * @return result
 */
/**
 * actionPerformed method.
 * @param e parameter
 */
/**
 * actionPerformed method.
 * @param e parameter
 */
    public void actionPerformed(ActionEvent e) {
        Object source = e.getSource();
        if (source == vista.getBtnCrear()) {
            String titulo = JOptionPane.showInputDialog(vista, "Título del ítem:");
            if (titulo == null || titulo.trim().isEmpty()) return;
            String descripcion = JOptionPane.showInputDialog(vista, "Descripción del ítem:");
            if (descripcion == null || descripcion.trim().isEmpty()) return;
            String precioStr = JOptionPane.showInputDialog(vista, "Precio del ítem:");
            double precio;
            try { precio = Double.parseDouble(precioStr); } catch (Exception ex) { return; }
            String idItem = "ITM-" + (proveedor.getItems().size() + 1);
            Item nuevo = new Item(idItem, titulo, descripcion, precio);
            gestorProveedor.crearItem(proveedor, nuevo);
            vista.cargarItems(proveedor.getItems());
        } else if (source == vista.getBtnEditar()) {
            int row = vista.getTablaItems().getSelectedRow();
            if (row == -1) return;
            Item item = proveedor.getItems().get(row);
            String titulo = JOptionPane.showInputDialog(vista, "Nuevo título:", item.getTitulo());
            if (titulo == null || titulo.trim().isEmpty()) return;
            String descripcion = JOptionPane.showInputDialog(vista, "Nueva descripción:", item.getDescripcion());
            if (descripcion == null || descripcion.trim().isEmpty()) return;
            String precioStr = JOptionPane.showInputDialog(vista, "Nuevo precio:", String.valueOf(item.getPrecio()));
            double precio;
            try { precio = Double.parseDouble(precioStr); } catch (Exception ex) { return; }
            Item editado = new Item(item.getId(), titulo, descripcion, precio);
            gestorProveedor.actualizarItem(proveedor, editado);
            vista.cargarItems(proveedor.getItems());
        } else if (source == vista.getBtnEliminar()) {
            int row = vista.getTablaItems().getSelectedRow();
            if (row == -1) return;
            Item item = proveedor.getItems().get(row);
            gestorProveedor.eliminarItem(proveedor, item);
            vista.cargarItems(proveedor.getItems());
        } else if (source == vista.getBtnCerrar()) {
            vista.dispose();
        }
    }
}


===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/constructor/GestorGestionPublicacionesProveedor.java =====

package udistrital.avanzada.rolapet.constructor;

import udistrital.avanzada.rolapet.modelo.Publicacion;
import udistrital.avanzada.rolapet.modelo.Proveedor;
import udistrital.avanzada.rolapet.vista.VentanaGestionPublicacionesProveedor;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.time.LocalDate;

/**
 * Gestor para la ventana de gestión de publicaciones del proveedor.
 */
/**
 * Class GestorGestionPublicacionesProveedor.
 */
/**
 * Class GestorGestionPublicacionesProveedor.
 */
public class GestorGestionPublicacionesProveedor implements ActionListener {
    private VentanaGestionPublicacionesProveedor vista;
    private Proveedor proveedor;
    private IGestorPublicacion gestorPublicacion;

    public GestorGestionPublicacionesProveedor(VentanaGestionPublicacionesProveedor vista, Proveedor proveedor, IGestorPublicacion gestorPublicacion) {
        this.vista = vista;
        this.proveedor = proveedor;
        this.gestorPublicacion = gestorPublicacion;
        vista.getBtnCrear().addActionListener(this);
        vista.getBtnEditar().addActionListener(this);
        vista.getBtnEliminar().addActionListener(this);
        vista.getBtnCerrar().addActionListener(this);
    }

    @Override
/**
 * actionPerformed method.
 * @param e parameter
 * @return result
 */
/**
 * actionPerformed method.
 * @param e parameter
 */
/**
 * actionPerformed method.
 * @param e parameter
 */
    public void actionPerformed(ActionEvent e) {
        Object source = e.getSource();
        if (source == vista.getBtnCrear()) {
            String titulo = JOptionPane.showInputDialog(vista, "Título de la publicación:");
            if (titulo == null || titulo.trim().isEmpty()) return;
            String tipo = JOptionPane.showInputDialog(vista, "Tipo (Evento/Promoción/Descuento):");
            if (tipo == null || tipo.trim().isEmpty()) return;
            String descripcion = JOptionPane.showInputDialog(vista, "Descripción:");
            if (descripcion == null || descripcion.trim().isEmpty()) return;
            String id = "PUB-" + (proveedor.getPublicaciones().size() + 1);
            LocalDate fecha = LocalDate.now();
            Publicacion nueva = new Publicacion(id, titulo, descripcion, tipo, proveedor, fecha);
            gestorPublicacion.crearPublicacion(proveedor, nueva);
            vista.cargarPublicaciones(proveedor.getPublicaciones());
        } else if (source == vista.getBtnEditar()) {
            int row = vista.getTablaPublicaciones().getSelectedRow();
            if (row == -1) return;
            Publicacion pub = proveedor.getPublicaciones().get(row);
            String titulo = JOptionPane.showInputDialog(vista, "Nuevo título:", pub.getTitulo());
            if (titulo == null || titulo.trim().isEmpty()) return;
            String tipo = JOptionPane.showInputDialog(vista, "Nuevo tipo:", pub.getTipo());
            if (tipo == null || tipo.trim().isEmpty()) return;
            String descripcion = JOptionPane.showInputDialog(vista, "Nueva descripción:", pub.getDescripcion());
            if (descripcion == null || descripcion.trim().isEmpty()) return;
            String id = pub.getId();
            LocalDate fecha = pub.getFecha();
            Publicacion editada = new Publicacion(id, titulo, descripcion, tipo, proveedor, fecha);
            gestorPublicacion.actualizarPublicacion(proveedor, editada);
            vista.cargarPublicaciones(proveedor.getPublicaciones());
        } else if (source == vista.getBtnEliminar()) {
            int row = vista.getTablaPublicaciones().getSelectedRow();
            if (row == -1) return;
            Publicacion pub = proveedor.getPublicaciones().get(row);
            gestorPublicacion.eliminarPublicacion(proveedor, pub);
            vista.cargarPublicaciones(proveedor.getPublicaciones());
        } else if (source == vista.getBtnCerrar()) {
            vista.dispose();
        }
    }
}


===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/constructor/GestorInicioSesionAdministrador.java =====

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package udistrital.avanzada.rolapet.constructor;

import udistrital.avanzada.rolapet.vista.FormularioInicioSesionAdministrador;
import udistrital.avanzada.rolapet.vista.VentanaSeleccionRegistroProveedor;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 * Class GestorInicioSesionAdministrador.
 */
/**
 * Class GestorInicioSesionAdministrador.
 */
public class GestorInicioSesionAdministrador implements ActionListener {

    private FormularioInicioSesionAdministrador vista;
    private GestorRegistroProveedor gestorProveedor;
    private udistrital.avanzada.rolapet.modelo.RepositorioPublicaciones repoPublicaciones;

    public GestorInicioSesionAdministrador(FormularioInicioSesionAdministrador vista,
                                           GestorRegistroProveedor gestorProveedor) {
        this(vista, gestorProveedor, new udistrital.avanzada.rolapet.modelo.RepositorioPublicaciones());
    }

    public GestorInicioSesionAdministrador(FormularioInicioSesionAdministrador vista,
                                           GestorRegistroProveedor gestorProveedor,
                                           udistrital.avanzada.rolapet.modelo.RepositorioPublicaciones repoPublicaciones) {
        this.vista = vista;
        this.gestorProveedor = gestorProveedor;
        this.repoPublicaciones = repoPublicaciones;
        this.vista.setControlador(this);
    }

    @Override
/**
 * actionPerformed method.
 * @param e parameter
 * @return result
 */
/**
 * actionPerformed method.
 * @param e parameter
 */
/**
 * actionPerformed method.
 * @param e parameter
 */
    public void actionPerformed(ActionEvent e) {
        Object source = e.getSource();

        if (source == vista.getBtnIngresar()) {
            String usuario = vista.getUsuario();
            String contrasena = vista.getContrasena();

        if (usuario.equals("administrador") && contrasena.equals("12345678")) {
        JOptionPane.showMessageDialog(vista,
            " Bienvenido Administrador",
            "Login exitoso", JOptionPane.INFORMATION_MESSAGE);

        // Abrir panel de administrador con botón para crear publicación
        new GestorVentanaAdministrador(repoPublicaciones);
        vista.dispose();
            } else {
                JOptionPane.showMessageDialog(vista,
                        " Usuario o contraseña inválidos.",
                        "Error", JOptionPane.ERROR_MESSAGE);
            }

        } else if (source == vista.getBtnCancelar()) {
            vista.dispose();
        }
    }
}


===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/constructor/GestorInicioSesionProveedor.java =====

package udistrital.avanzada.rolapet.constructor;

import udistrital.avanzada.rolapet.vista.FormularioInicioSesionProveedor;
import udistrital.avanzada.rolapet.modelo.Proveedor;
import udistrital.avanzada.rolapet.vista.VentanaProveedor;
import udistrital.avanzada.rolapet.modelo.RepositorioPublicaciones;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 * Class GestorInicioSesionProveedor.
 */
/**
 * Class GestorInicioSesionProveedor.
 */
public class GestorInicioSesionProveedor implements ActionListener {

    private FormularioInicioSesionProveedor vista;
    private GestorRegistroProveedor gestorProveedor;
    private RepositorioPublicaciones repoPublicaciones;

    public GestorInicioSesionProveedor(FormularioInicioSesionProveedor vista,
                                       GestorRegistroProveedor gestorProveedor,
                                       RepositorioPublicaciones repoPublicaciones) {
        this.vista = vista;
        this.gestorProveedor = gestorProveedor;
        this.repoPublicaciones = repoPublicaciones;
        this.vista.setControlador(this);
    }

    @Override
/**
 * actionPerformed method.
 * @param e parameter
 * @return result
 */
/**
 * actionPerformed method.
 * @param e parameter
 */
/**
 * actionPerformed method.
 * @param e parameter
 */
    public void actionPerformed(ActionEvent e) {
        Object source = e.getSource();

    if (source == vista.getBtnIngresar()) {
        String correo = vista.getUsuario();
        String contrasena = vista.getContrasena();
        String tipo = vista.getTipoProveedor();

        // Validación básica de campos
        if (correo == null || correo.trim().isEmpty() || contrasena == null || contrasena.trim().isEmpty()) {
        JOptionPane.showMessageDialog(vista,
            "Por favor ingrese correo y contraseña.",
            "Campos requeridos", JOptionPane.WARNING_MESSAGE);
        return;
        }

        Proveedor proveedor = gestorProveedor.iniciarSesion(correo, contrasena, tipo);

        if (proveedor != null) {
        JOptionPane.showMessageDialog(vista,
            "✅ Bienvenido " + proveedor.getNombre() +
                " (" + proveedor.getTipoProveedor() + ")",
            "Login exitoso", JOptionPane.INFORMATION_MESSAGE);

        VentanaProveedor ventanaProveedor = new VentanaProveedor(
            proveedor.getNombre(), proveedor.getTipoProveedor()
        );
        new GestorVentanaProveedor(ventanaProveedor, proveedor, repoPublicaciones);
        ventanaProveedor.setVisible(true);

        vista.dispose();
        } else {
        // Mensaje de error más claro
        JOptionPane.showMessageDialog(vista,
            "Correo, contraseña o tipo de proveedor incorrectos.",
            "Error de autenticación", JOptionPane.ERROR_MESSAGE);
        }
    } else if (source == vista.getBtnCancelar()) {
        vista.dispose();
        // Volver a la ventana de selección de tipo de proveedor
        udistrital.avanzada.rolapet.vista.VentanaSeleccionTipoProveedor seleccionTipo = new udistrital.avanzada.rolapet.vista.VentanaSeleccionTipoProveedor();
        new GestorSeleccionTipoProveedor(seleccionTipo, gestorProveedor);
        seleccionTipo.setVisible(true);
    }
    }
}


===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/constructor/GestorRegistroCliente.java =====

package udistrital.avanzada.rolapet.constructor;

import udistrital.avanzada.rolapet.modelo.Cliente;
import udistrital.avanzada.rolapet.vista.FormularioRegistroCliente;
import udistrital.avanzada.rolapet.vista.VentanaUsuarios;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
/**
 * Clase GestorRegistroCliente que controla la lógica de registro de clientes
 * a partir de un formulario visual. Valida la contraseña y gestiona la comunicación
 * con un controlador de usuarios para registrar nuevos clientes.
 * <p>
 * Maneja eventos de los botones de registrar y regresar en el formulario.
 * </p>
 * 
 * @author Sarita
 * @version 1.1, 26-09-2025
 */
/**
 * Class GestorRegistroCliente.
 */
/**
 * Class GestorRegistroCliente.
 */
public class GestorRegistroCliente implements ActionListener {
    private FormularioRegistroCliente formulario;
    private VentanaUsuarios ventanaUsuarios;
    private ControladorUsuario controladorUsuario;

    /**
     * Constructor que inicializa los componentes y asigna el controlador al formulario.
     * 
     * @param formulario instancia del formulario de registro cliente
     * @param ventanaUsuarios instancia de la ventana de gestión de usuarios
     * @param controladorUsuario controlador que maneja la lógica de usuarios
     */
    public GestorRegistroCliente(FormularioRegistroCliente formulario, VentanaUsuarios ventanaUsuarios, ControladorUsuario controladorUsuario) {
        this.formulario = formulario;
        this.ventanaUsuarios = ventanaUsuarios;
        this.controladorUsuario = controladorUsuario;

        this.formulario.setControlador(this);
    }

    /**
     * Valida que la contraseña cumpla con el patrón definido:
     * mínimo 8 caracteres, al menos una letra mayúscula, un número y un carácter especial.
     * 
     * @param contrasena contraseña a validar
     * @return true si la contraseña es válida, false en caso contrario
     */
/**
 * validarContrasena method.
 * @param contrasena parameter
 * @return result
 */
/**
 * validarContrasena method.
 * @param contrasena parameter
 * @return result
 */
/**
 * validarContrasena method.
 * @param contrasena parameter
 * @return result
 */
    private boolean validarContrasena(String contrasena) {
        String pattern = "^(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$";
        return contrasena.matches(pattern);
    }

    /**
     * Método que responde a los eventos generados en el formulario.
     * Gestiona la lógica del botón de registro y el botón de retroceso.
     * 
     * @param e evento de acción disparado
     */
/**
 * Responde a los eventos generados en el formulario de registro.
 * MODIFICACIÓN: Se agregaron capturas de excepción IllegalArgumentException para validar
 * cedula, correo y celular usando los setters validados de Persona/Cliente.
 * Si algún dato no es válido, se muestra mensaje de error adecuado.
 * 
 * @param e evento de acción disparado
 */
    @Override
/**
 * actionPerformed method.
 * @param e parameter
 * @return result
 */
/**
 * actionPerformed method.
 * @param e parameter
 */
/**
 * actionPerformed method.
 * @param e parameter
 */
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == formulario.getBtnRegistrar()) {
            String pass = formulario.getContrasena();
            if (!validarContrasena(pass)) {
                JOptionPane.showMessageDialog(formulario,
                        "La contraseña debe tener mínimo 8 caracteres, al menos una letra mayúscula, un número y un carácter especial.",
                        "Error de validación",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }

            try {
                Cliente nuevoCliente = new Cliente(
                        formulario.getNombreUsuario(),
                        formulario.getContrasena(),
                        formulario.getNombre(),
                        formulario.getApellido(),
                        formulario.getCedula(),
                        formulario.getCorreo(),
                        formulario.getCelular()
                );

                if (controladorUsuario.registrarUsuario(nuevoCliente)) {
                    JOptionPane.showMessageDialog(formulario, "Registro exitoso");
                    formulario.limpiarCampos();
                } else {
                    JOptionPane.showMessageDialog(formulario, "Nombre de usuario o cédula ya existentes");
                }
            } catch (IllegalArgumentException ex) {
                JOptionPane.showMessageDialog(formulario,
                        ex.getMessage(),
                        "Error de validación",
                        JOptionPane.ERROR_MESSAGE);
            }

        } else if (e.getSource() == formulario.getBtnAtras()) {
            formulario.dispose();
            ventanaUsuarios.setVisible(true);
        }
    }
}

===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/constructor/GestorRegistroProveedor.java =====

package udistrital.avanzada.rolapet.constructor;

import udistrital.avanzada.rolapet.modelo.Proveedor;
import udistrital.avanzada.rolapet.modelo.ProveedorInsumo;
import udistrital.avanzada.rolapet.modelo.ProveedorServicio;

import java.util.ArrayList;
import java.util.List;

/**
 * Class GestorRegistroProveedor.
 */
/**
 * Class GestorRegistroProveedor.
 */
public class GestorRegistroProveedor {

    private List<Proveedor> proveedores;

    public GestorRegistroProveedor() {
        this.proveedores = new ArrayList<>();
    }

    public void registrarProveedorInsumo(String nombreUsuario, String contrasena,
                                         String nombre, String apellido, String cedula,
                                         String correo, String celular) {
        ProveedorInsumo proveedor = new ProveedorInsumo(nombreUsuario, contrasena, nombre,
                apellido, cedula, correo, celular);
        proveedores.add(proveedor);
        System.out.println("Proveedor de Insumo registrado: " + proveedor.getNombre());
    }

    public void registrarProveedorServicio(String nombreUsuario, String contrasena,
                                           String nombre, String apellido, String cedula,
                                           String correo, String celular) {
        ProveedorServicio proveedor = new ProveedorServicio(nombreUsuario, contrasena, nombre,
                apellido, cedula, correo, celular);
        proveedores.add(proveedor);
        System.out.println("Proveedor de Servicio registrado: " + proveedor.getNombre());
    }

    /**
     * Busca y retorna un proveedor que coincida con el correo, la contraseña y el tipo provistos.
     * 
     * @param correo correo electrónico del proveedor
     * @param contrasena contraseña del proveedor
     * @param tipo tipo de proveedor ("Servicio", "Insumo", etc.)
     * @return el proveedor encontrado o null si no existe coincidencia
     */
/**
 * iniciarSesion method.
 * @param correo parameter
 * @param contrasena parameter
 * @param tipo parameter
 * @return result
 */
/**
 * iniciarSesion method.
 * @param correo parameter
 * @param contrasena parameter
 * @param tipo parameter
 * @return result
 */
/**
 * iniciarSesion method.
 * @param correo parameter
 * @param contrasena parameter
 * @param tipo parameter
 * @return result
 */
    public Proveedor iniciarSesion(String correo, String contrasena, String tipo) {
        for (Proveedor proveedor : proveedores) {
            if (proveedor.getCorreo().equalsIgnoreCase(correo)
                    && proveedor.getContrasena().equals(contrasena)
                    && proveedor.getTipoProveedor().equalsIgnoreCase(tipo)) {
                return proveedor;
            }
        }
        return null;
    }

/**
 * getProveedores method.
 * @return result
 */
/**
 * getProveedores method.
 * @return result
 */
/**
 * getProveedores method.
 * @return result
 */
    public List<Proveedor> getProveedores() {
        return proveedores;
    }
}


===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/constructor/GestorRegistroProveedorInsumos.java =====

package udistrital.avanzada.rolapet.constructor;

import udistrital.avanzada.rolapet.vista.FormularioRegistroProveedorInsumos;
import udistrital.avanzada.rolapet.vista.VentanaInicio;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 * Class GestorRegistroProveedorInsumos.
 */
/**
 * Class GestorRegistroProveedorInsumos.
 */
public class GestorRegistroProveedorInsumos implements ActionListener {

    private FormularioRegistroProveedorInsumos vista;
    private GestorRegistroProveedor gestorProveedor;

    public GestorRegistroProveedorInsumos(FormularioRegistroProveedorInsumos vista, GestorRegistroProveedor gestorProveedor) {
        this.vista = vista;
        this.gestorProveedor = gestorProveedor;
        this.vista.setControlador(this);
    }

    @Override
/**
 * actionPerformed method.
 * @param e parameter
 * @return result
 */
/**
 * actionPerformed method.
 * @param e parameter
 */
/**
 * actionPerformed method.
 * @param e parameter
 */
    public void actionPerformed(ActionEvent e) {
        Object source = e.getSource();

        if (source == vista.getBtnRegistrar()) {
            String contrasena = vista.getContrasena();
            String nombre = vista.getNombre();
            String apellido = vista.getApellido();
            String correo = vista.getCorreo();
            String celular = vista.getCelular();
            String cedula = vista.getCedula();

            // Validación de campos vacíos
            if (contrasena.isEmpty() || nombre.isEmpty() || apellido.isEmpty() || cedula.isEmpty() || correo.isEmpty() || celular.isEmpty()) {
                JOptionPane.showMessageDialog(vista, "Todos los campos son obligatorios.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Validación de correo
            if (!correo.contains("@") || !correo.contains(".")) {
                JOptionPane.showMessageDialog(vista, "El correo debe contener '@' y al menos un punto.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Validación de celular (10 dígitos numéricos)
            if (!celular.matches("\\d{10}")) {
                JOptionPane.showMessageDialog(vista, "El celular debe tener exactamente 10 números.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Validación de cédula (solo números)
            if (!cedula.matches("\\d+")) {
                JOptionPane.showMessageDialog(vista, "La cédula solo debe contener números.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            gestorProveedor.registrarProveedorInsumo(
                    correo, // El usuario ahora es el correo
                    contrasena,
                    nombre,
                    apellido,
                    cedula,
                    correo,
                    celular
            );

            JOptionPane.showMessageDialog(vista,
                "Proveedor de Insumo registrado correctamente.\n" +
                "Usuario asignado: " + correo + "\n" +
                "Contraseña asignada: " + contrasena,
                "Registro exitoso", JOptionPane.INFORMATION_MESSAGE);
            vista.dispose();

            VentanaInicio inicio = new VentanaInicio();
            new GestorVentanaInicio(inicio, new ControladorUsuario());
            inicio.setVisible(true);

        } else if (source == vista.getBtnCancelar()) {
            vista.dispose();
            VentanaInicio inicio = new VentanaInicio();
            new GestorVentanaInicio(inicio, new ControladorUsuario());
            inicio.setVisible(true);
        }
    }
}


===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/constructor/GestorRegistroProveedorServicios.java =====

package udistrital.avanzada.rolapet.constructor;

import udistrital.avanzada.rolapet.vista.FormularioRegistroProveedorServicios;
import udistrital.avanzada.rolapet.vista.VentanaInicio;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 * Class GestorRegistroProveedorServicios.
 */
/**
 * Class GestorRegistroProveedorServicios.
 */
public class GestorRegistroProveedorServicios implements ActionListener {

    private FormularioRegistroProveedorServicios vista;
    private GestorRegistroProveedor gestorProveedor;

    public GestorRegistroProveedorServicios(FormularioRegistroProveedorServicios vista, GestorRegistroProveedor gestorProveedor) {
        this.vista = vista;
        this.gestorProveedor = gestorProveedor;
        this.vista.setControlador(this);
    }

    @Override
/**
 * actionPerformed method.
 * @param e parameter
 * @return result
 */
/**
 * actionPerformed method.
 * @param e parameter
 */
/**
 * actionPerformed method.
 * @param e parameter
 */
    public void actionPerformed(ActionEvent e) {
        Object source = e.getSource();

        if (source == vista.getBtnRegistrar()) {

            String contrasena = vista.getContrasena();
            String nombre = vista.getNombre();
            String apellido = vista.getApellido();
            String correo = vista.getCorreo();
            String celular = vista.getCelular();
            String cedula = vista.getCedula();

            // Validación de campos vacíos
            if (contrasena.isEmpty() || nombre.isEmpty() || apellido.isEmpty() || cedula.isEmpty() || correo.isEmpty() || celular.isEmpty()) {
                JOptionPane.showMessageDialog(vista, "Todos los campos son obligatorios.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Validación de correo
            if (!correo.contains("@") || !correo.contains(".")) {
                JOptionPane.showMessageDialog(vista, "El correo debe contener '@' y al menos un punto.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Validación de celular (10 dígitos numéricos)
            if (!celular.matches("\\d{10}")) {
                JOptionPane.showMessageDialog(vista, "El celular debe tener exactamente 10 números.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Validación de cédula (solo números)
            if (!cedula.matches("\\d+")) {
                JOptionPane.showMessageDialog(vista, "La cédula solo debe contener números.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

        gestorProveedor.registrarProveedorServicio(
            correo, // El usuario ahora es el correo
            contrasena,
            nombre,
            apellido,
            cedula,
            correo,
            celular
        );

            JOptionPane.showMessageDialog(vista,
                "Proveedor de Servicio registrado correctamente.\n" +
                "Usuario asignado: " + correo + "\n" +
                "Contraseña asignada: " + contrasena,
                "Registro exitoso", JOptionPane.INFORMATION_MESSAGE);
            vista.dispose();

            VentanaInicio inicio = new VentanaInicio();
            new GestorVentanaInicio(inicio, new ControladorUsuario());
            inicio.setVisible(true);

        } else if (source == vista.getBtnCancelar()) {
            vista.dispose();
            VentanaInicio inicio = new VentanaInicio();
            new GestorVentanaInicio(inicio, new ControladorUsuario());
            inicio.setVisible(true);
        }
    }
}


===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/constructor/GestorRegistroVehiculo.java =====

package udistrital.avanzada.rolapet.constructor;

import udistrital.avanzada.rolapet.modelo.MotoElectrica;
import udistrital.avanzada.rolapet.modelo.Scooter;
import udistrital.avanzada.rolapet.modelo.Vehiculo;
import udistrital.avanzada.rolapet.modelo.Usuario;
import udistrital.avanzada.rolapet.modelo.RepositorioUsuarios;
import udistrital.avanzada.rolapet.vista.VentanaRegistroVehiculo;
import udistrital.avanzada.rolapet.vista.VentanaInicioUsuario;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 * Class GestorRegistroVehiculo.
 */
/**
 * Class GestorRegistroVehiculo.
 */
public class GestorRegistroVehiculo implements ActionListener {
    private VentanaRegistroVehiculo ventana;
    private ControladorVehiculo controladorVehiculo;
    private RepositorioUsuarios repositorioUsuarios;
    private Usuario usuarioActual;

    /**
     * Constructor original (mantengo para compatibilidad: crea usuario de prueba)
     */
    public GestorRegistroVehiculo(VentanaRegistroVehiculo ventana, ControladorVehiculo controladorVehiculo) {
        this.ventana = ventana;
        this.controladorVehiculo = controladorVehiculo;

        // Usuario de prueba (comportamiento original)
        this.usuarioActual = new Usuario("Sofia", "Sofia14@", "Sofia", "Gomez",
                "1234567890", "sofia@email.com", "3001234567") {};
        this.repositorioUsuarios = new RepositorioUsuarios();
        repositorioUsuarios.agregarUsuario(usuarioActual);

        this.ventana.setVisible(true);
        this.ventana.getBtnRegistrar().addActionListener(this);
        this.ventana.getBtnCancelar().addActionListener(this);
    }

    /**
     * Nueva sobrecarga: recibe el usuario actual y el repositorio para que
     * los vehículos se asocien correctamente al usuario que está logueado.
     */
    public GestorRegistroVehiculo(VentanaRegistroVehiculo ventana,
                                  ControladorVehiculo controladorVehiculo,
                                  Usuario usuarioActual,
                                  RepositorioUsuarios repositorioUsuarios) {
        this.ventana = ventana;
        this.controladorVehiculo = controladorVehiculo;
        this.usuarioActual = usuarioActual;
        this.repositorioUsuarios = (repositorioUsuarios == null) ? new RepositorioUsuarios() : repositorioUsuarios;

        // Asegurarse de que el usuario esté en el repositorio
        if (this.usuarioActual != null && this.repositorioUsuarios.buscarPorNombreUsuario(this.usuarioActual.getNombreUsuario()) == null) {
            this.repositorioUsuarios.agregarUsuario(this.usuarioActual);
        }

        this.ventana.setVisible(true);
        this.ventana.getBtnRegistrar().addActionListener(this);
        this.ventana.getBtnCancelar().addActionListener(this);
    }

    @Override
/**
 * actionPerformed method.
 * @param e parameter
 * @return result
 */
/**
 * actionPerformed method.
 * @param e parameter
 */
/**
 * actionPerformed method.
 * @param e parameter
 */
    public void actionPerformed(ActionEvent e) {
        Object source = e.getSource();

        if (source == ventana.getBtnRegistrar()) {
            // Obtener datos del formulario
            String tipo = ventana.getTipoVehiculo();
            String marca = ventana.getMarca();
            String modelo = ventana.getModelo();
            String placa = ventana.getPlaca();
            double autonomia = ventana.getAutonomia();
            int potencia = ventana.getPotencia();
            double velocidad = ventana.getVelocidad();

            // Validaciones (idénticas a tu lógica previa)
            if (placa.isEmpty() || !placa.matches("[A-Za-z0-9]{1,6}")) {
                JOptionPane.showMessageDialog(ventana, "La placa debe contener solo letras y números, máximo 6 caracteres.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (marca.isEmpty()) {
                JOptionPane.showMessageDialog(ventana, "La marca no puede estar vacía.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (modelo.isEmpty()) {
                JOptionPane.showMessageDialog(ventana, "El modelo no puede estar vacío.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (autonomia <= 0 || potencia <= 0 || velocidad <= 0) {
                JOptionPane.showMessageDialog(ventana, "Autonomía, potencia y velocidad deben ser positivos.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Validar placa duplicada
            for (Vehiculo v : controladorVehiculo.obtenerVehiculos()) {
                if (v.getPlaca().equalsIgnoreCase(placa)) {
                    JOptionPane.showMessageDialog(ventana, "Ya existe un vehículo con esa placa.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }

            // Crear vehículo según tipo
            Vehiculo vehiculo = null;
            if ("Scooter".equals(tipo)) {
                vehiculo = new Scooter(marca, modelo, placa, autonomia, potencia, velocidad,
                        ventana.isLlantasOffRoad(), ventana.isIluminacionAvanzada());
            } else if ("Motoeléctrica".equals(tipo)) {
                vehiculo = new MotoElectrica(marca, modelo, placa, autonomia, potencia, velocidad,
                        ventana.isFrenosDisco(), ventana.isSuspensionAlta(),
                        ventana.isLucesLED(), ventana.isAlarmaAntiRobo());
            }

            if (vehiculo != null) {
                if (controladorVehiculo.registrarVehiculo(vehiculo)) {
                    // --- AÑADIDO: asociar vehículo al usuario actual si existe ---
                    if (usuarioActual != null) {
                        usuarioActual.agregarVehiculo(vehiculo);
                    }
                    // (opcional) asegurar usuario en repositorio
                    if (repositorioUsuarios != null && usuarioActual != null &&
                            repositorioUsuarios.buscarPorNombreUsuario(usuarioActual.getNombreUsuario()) == null) {
                        repositorioUsuarios.agregarUsuario(usuarioActual);
                    }
                    // --------------------------------------------------------

                    JOptionPane.showMessageDialog(ventana, "Vehículo registrado exitosamente");
                    ventana.limpiarCampos();
                    ventana.dispose();

                    // Obtener repositorio de publicaciones (igual que antes)
                    udistrital.avanzada.rolapet.modelo.RepositorioPublicaciones repoPublicacionesGlobal =
                            GestorSeleccionTipoProveedor.getRepoPublicacionesGlobal();
                    if (repoPublicacionesGlobal == null) {
                        repoPublicacionesGlobal = new udistrital.avanzada.rolapet.modelo.RepositorioPublicaciones();
                    }

                    JFrame ventanaPrincipal = null;
                    if (ventana instanceof udistrital.avanzada.rolapet.vista.VentanaRegistroVehiculo) {
                        ventanaPrincipal = ((udistrital.avanzada.rolapet.vista.VentanaRegistroVehiculo) ventana).getOwnerWindow();
                    }
                    VentanaInicioUsuario ventanaInicioUsuario = new VentanaInicioUsuario(usuarioActual, repositorioUsuarios, repoPublicacionesGlobal, ventanaPrincipal);
                    new GestorVentanaInicioUsuario(ventanaInicioUsuario, usuarioActual, repositorioUsuarios, repoPublicacionesGlobal, ventanaPrincipal);
                    ventanaInicioUsuario.setVisible(true);
                } else {
                    JOptionPane.showMessageDialog(ventana, "Ya existe un vehículo con esos datos", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }

        } else if (source == ventana.getBtnCancelar()) {
            ventana.dispose();
        }
    }
}


===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/constructor/GestorSeleccionRegistroProveedor.java =====

package udistrital.avanzada.rolapet.constructor;

import udistrital.avanzada.rolapet.vista.FormularioRegistroProveedorInsumos;
import udistrital.avanzada.rolapet.vista.FormularioRegistroProveedorServicios;
import udistrital.avanzada.rolapet.vista.VentanaSeleccionRegistroProveedor;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 * Class GestorSeleccionRegistroProveedor.
 */
/**
 * Class GestorSeleccionRegistroProveedor.
 */
public class GestorSeleccionRegistroProveedor implements ActionListener {

    private VentanaSeleccionRegistroProveedor vista;
    private GestorRegistroProveedor gestorProveedor;

    public GestorSeleccionRegistroProveedor(VentanaSeleccionRegistroProveedor vista,
                                            GestorRegistroProveedor gestorProveedor) {
        this.vista = vista;
        this.gestorProveedor = gestorProveedor;
        this.vista.setControlador(this);
    }

    @Override
/**
 * actionPerformed method.
 * @param e parameter
 * @return result
 */
/**
 * actionPerformed method.
 * @param e parameter
 */
/**
 * actionPerformed method.
 * @param e parameter
 */
    public void actionPerformed(ActionEvent e) {
        Object source = e.getSource();

        if (source == vista.getBtnRegistrarInsumos()) {
            FormularioRegistroProveedorInsumos registroInsumos = new FormularioRegistroProveedorInsumos(vista);
            new GestorRegistroProveedorInsumos(registroInsumos, gestorProveedor);
            registroInsumos.setVisible(true);
            vista.setVisible(false);

        } else if (source == vista.getBtnRegistrarServicios()) {
            FormularioRegistroProveedorServicios registroServicios = new FormularioRegistroProveedorServicios(vista);
            new GestorRegistroProveedorServicios(registroServicios, gestorProveedor);
            registroServicios.setVisible(true);
            vista.setVisible(false);
        }
    }
}


===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/constructor/GestorSeleccionTipoProveedor.java =====

package udistrital.avanzada.rolapet.constructor;

import udistrital.avanzada.rolapet.vista.FormularioInicioSesionProveedor;
import udistrital.avanzada.rolapet.vista.VentanaSeleccionTipoProveedor;
import udistrital.avanzada.rolapet.modelo.RepositorioPublicaciones;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 * Class GestorSeleccionTipoProveedor.
 */
/**
 * Class GestorSeleccionTipoProveedor.
 */
public class GestorSeleccionTipoProveedor implements ActionListener {
/**
 * getRepoPublicacionesGlobal method.
 * @return result
 */
    public static RepositorioPublicaciones getRepoPublicacionesGlobal() {
        return repoPublicacionesGlobal;
    }

    private VentanaSeleccionTipoProveedor vista;
    private GestorRegistroProveedor gestorProveedor;
    private static RepositorioPublicaciones repoPublicacionesGlobal = null;

    public GestorSeleccionTipoProveedor(VentanaSeleccionTipoProveedor vista,
                                        GestorRegistroProveedor gestorProveedor) {
        this.vista = vista;
        this.gestorProveedor = gestorProveedor;
        if (repoPublicacionesGlobal == null) {
            repoPublicacionesGlobal = new RepositorioPublicaciones();
        }
        this.vista.setControlador(this);
    }

    @Override
/**
 * actionPerformed method.
 * @param e parameter
 * @return result
 */
/**
 * actionPerformed method.
 * @param e parameter
 */
/**
 * actionPerformed method.
 * @param e parameter
 */
    public void actionPerformed(ActionEvent e) {
        Object source = e.getSource();

        if (source == vista.getBtnServicio()) {
            abrirLogin("ProveedorServicio");
        } else if (source == vista.getBtnInsumo()) {
            abrirLogin("ProveedorInsumo");
        }
    }

/**
 * abrirLogin method.
 * @param tipo parameter
 * @return result
 */
/**
 * abrirLogin method.
 * @param tipo parameter
 */
/**
 * abrirLogin method.
 * @param tipo parameter
 */
    private void abrirLogin(String tipo) {
    FormularioInicioSesionProveedor login = new FormularioInicioSesionProveedor(tipo);
    new GestorInicioSesionProveedor(login, gestorProveedor, repoPublicacionesGlobal);
    login.setVisible(true);
    vista.dispose();
    }
}


===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/constructor/GestorUsuario.java =====

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package udistrital.avanzada.rolapet.constructor;

import java.util.ArrayList;
import java.util.List;
import udistrital.avanzada.rolapet.modelo.Usuario;

/**
 * Clase responsable de gestionar el registro y almacenamiento de usuarios.
 * Permite registrar usuarios asegurando unicidad de nombre de usuario y cédula,
 * buscar usuarios y obtener la lista completa de usuarios registrados.
 * 
 * @author sarita
 * @version 1.0, 21-09-2025
 */
/**
 * Class GestorUsuario.
 */
/**
 * Class GestorUsuario.
 */
public class GestorUsuario {
    private List<Usuario> usuarios;

    /**
     * Crea un gestor vacío sin usuarios.
     */
    public GestorUsuario() {
        usuarios = new ArrayList<>();
    }

    /**
     * Registra un nuevo usuario si no existe otro con el mismo nombre de usuario o cédula.
     * @param usuario Usuario a registrar
     * @return true si se registró correctamente, false si ya existe
     */
/**
 * registrarUsuario method.
 * @param usuario parameter
 * @return result
 */
/**
 * registrarUsuario method.
 * @param usuario parameter
 * @return result
 */
/**
 * registrarUsuario method.
 * @param usuario parameter
 * @return result
 */
    public boolean registrarUsuario(Usuario usuario) {
        if (buscarPorNombreUsuario(usuario.getNombreUsuario()) != null) {
            return false; // Ya existe usuario con ese nombre
        }
        if (buscarPorCedula(usuario.getCedula()) != null) {
            return false; // Ya existe usuario con esa cédula
        }
        usuarios.add(usuario);
        return true;
    }

    /**
     * Busca un usuario por nombre de usuario.
     * @param nombreUsuario Nombre de usuario
     * @return Usuario encontrado o null
     */
/**
 * buscarPorNombreUsuario method.
 * @param nombreUsuario parameter
 * @return result
 */
/**
 * buscarPorNombreUsuario method.
 * @param nombreUsuario parameter
 * @return result
 */
/**
 * buscarPorNombreUsuario method.
 * @param nombreUsuario parameter
 * @return result
 */
    public Usuario buscarPorNombreUsuario(String nombreUsuario) {
        for (Usuario u : usuarios) {
            if (u.getNombreUsuario().equalsIgnoreCase(nombreUsuario)) {
                return u;
            }
        }
        return null;
    }

    /**
     * Busca un usuario por cédula.
     * @param cedula Cédula
     * @return Usuario encontrado o null
     */
/**
 * buscarPorCedula method.
 * @param cedula parameter
 * @return result
 */
/**
 * buscarPorCedula method.
 * @param cedula parameter
 * @return result
 */
/**
 * buscarPorCedula method.
 * @param cedula parameter
 * @return result
 */
    public Usuario buscarPorCedula(String cedula) {
        for (Usuario u : usuarios) {
            if (u.getCedula().equalsIgnoreCase(cedula)) {
                return u;
            }
        }
        return null;
    }

    /**
     * Obtiene la lista de usuarios registrados.
     * @return Lista de usuarios
     */
/**
 * obtenerUsuarios method.
 * @return result
 */
/**
 * obtenerUsuarios method.
 * @return result
 */
/**
 * obtenerUsuarios method.
 * @return result
 */
    public List<Usuario> obtenerUsuarios() {
        return usuarios;
    }
}



===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/constructor/GestorVentanaAdministrador.java =====

package udistrital.avanzada.rolapet.constructor;

import udistrital.avanzada.rolapet.modelo.RepositorioPublicaciones;

import udistrital.avanzada.rolapet.vista.VentanaAdministrador;
import udistrital.avanzada.rolapet.vista.VentanaCrearPublicacion;

/**
 * Class GestorVentanaAdministrador.
 */
/**
 * Class GestorVentanaAdministrador.
 */
public class GestorVentanaAdministrador {
    private VentanaAdministrador ventana;

    private RepositorioPublicaciones repoPublicaciones;

    public GestorVentanaAdministrador(RepositorioPublicaciones repoPublicaciones) {
        this.repoPublicaciones = repoPublicaciones;
        ventana = new udistrital.avanzada.rolapet.vista.VentanaAdministrador();
        ventana.setRegistrarProveedorListener(e -> abrirVentanaSeleccionRegistroProveedor());
        ventana.setCrearPublicacionListener(e -> abrirVentanaCrearPublicacion());
        ventana.setCerrarSesionListener(e -> {
            ventana.dispose();
            new udistrital.avanzada.rolapet.vista.VentanaInicio().setVisible(true);
        });
        ventana.setVisible(true);
    }

/**
 * abrirVentanaSeleccionRegistroProveedor method.
 * @return result
 */
/**
 * abrirVentanaSeleccionRegistroProveedor method.
 */
/**
 * abrirVentanaSeleccionRegistroProveedor method.
 */
    private void abrirVentanaSeleccionRegistroProveedor() {
        udistrital.avanzada.rolapet.vista.VentanaSeleccionRegistroProveedor seleccion = new udistrital.avanzada.rolapet.vista.VentanaSeleccionRegistroProveedor();
        new udistrital.avanzada.rolapet.constructor.GestorSeleccionRegistroProveedor(seleccion, udistrital.avanzada.rolapet.constructor.GestorVentanaInicio.gestorProveedores);
        seleccion.setVisible(true);
    }

/**
 * abrirVentanaCrearPublicacion method.
 * @return result
 */
/**
 * abrirVentanaCrearPublicacion method.
 */
/**
 * abrirVentanaCrearPublicacion method.
 */
    private void abrirVentanaCrearPublicacion() {
        new udistrital.avanzada.rolapet.vista.VentanaCrearPublicacion(repoPublicaciones).setVisible(true);
    }
}


===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/constructor/GestorVentanaInicio.java =====

package udistrital.avanzada.rolapet.constructor;

import udistrital.avanzada.rolapet.vista.VentanaInicio;
import udistrital.avanzada.rolapet.vista.VentanaUsuarios;
import udistrital.avanzada.rolapet.vista.VentanaSeleccionTipoProveedor;
import udistrital.avanzada.rolapet.vista.FormularioInicioSesionAdministrador;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
/**
 * Clase que gestiona los eventos de la ventana de inicio de la aplicación.
 * 
 * <p>Permite la navegación hacia las diferentes secciones según el botón seleccionado:
 * usuarios, proveedores o administradores. Mantiene una instancia compartida
 * de proveedores para que la información sea consistente en toda la aplicación.</p>
 * 
 * <p><b>Historial de cambios:</b></p>
 * <ul>
 *   <li>2025-09-25 - Versión 1.2 - Modificada por Sarita: implementación inicial de flujo.</li>
 *   <li>2025-09-26 - Versión 1.3 - Modificada por Juan: agregado manejo de acción manejo de proveedores.</li>
 *   <li>2025-09-27 - Versión 1.3 - Modificada por Sarita: documentación.</li>
 * </ul>
 * 
 * @author Sarita
 * @version 1.3
 */

/**
 * Class GestorVentanaInicio.
 */
/**
 * Class GestorVentanaInicio.
 */
public class GestorVentanaInicio implements ActionListener {

    /** Ventana de inicio que se va a controlar */
    private VentanaInicio ventanaInicio;

    /** Controlador de usuarios asociado */
    private ControladorUsuario controladorUsuario;

    /** Instancia compartida de registro de proveedores */
    public static GestorRegistroProveedor gestorProveedores = null;
    // Usar la lista de proveedores real del gestor
    /**
     * Constructor que inicializa el gestor con la ventana de inicio y el controlador de usuarios.
     * 
     * @param ventanaInicio ventana principal de la aplicación
     * @param controladorUsuario controlador que maneja la lógica de usuarios
     */
    public GestorVentanaInicio(VentanaInicio ventanaInicio, ControladorUsuario controladorUsuario) {
        this.ventanaInicio = ventanaInicio;
        this.controladorUsuario = controladorUsuario;
        if (gestorProveedores == null) {
            gestorProveedores = new GestorRegistroProveedor();
        }
        this.ventanaInicio.setControlador(this);
    }
/**
     * Maneja los eventos de los botones en la ventana de inicio.
     * <p>
     * Dependiendo del botón presionado:
     * <ul>
     *     <li><b>Usuarios:</b> abre la ventana de gestión de usuarios.</li>
     *     <li><b>Proveedores:</b> abre la ventana de selección de tipo de proveedor,
     *     verificando que existan proveedores registrados.</li>
     *     <li><b>Administradores:</b> abre el formulario de inicio de sesión de administradores
     *     usando la misma instancia de registro de proveedores.</li>
     *     <li><b>Otros:</b> muestra un mensaje de acción no reconocida.</li>
     * </ul>
     * </p>
     * 
     * @param e evento generado al presionar un botón
     */
    @Override
/**
 * actionPerformed method.
 * @param e parameter
 * @return result
 */
/**
 * actionPerformed method.
 * @param e parameter
 */
/**
 * actionPerformed method.
 * @param e parameter
 */
    public void actionPerformed(ActionEvent e) {
        Object source = e.getSource();

        // Usuarios
        if (source == ventanaInicio.btnUsuarios) {
            VentanaUsuarios ventanaUsuarios = new VentanaUsuarios();
            new GestorVentanaUsuarios(ventanaUsuarios, ventanaInicio, controladorUsuario);
            ventanaUsuarios.setVisible(true);
            ventanaInicio.setVisible(false);

        // Proveedores
        } else if (source == ventanaInicio.btnProveedores) {
            if (gestorProveedores.getProveedores() == null || gestorProveedores.getProveedores().isEmpty()) {
                JOptionPane.showMessageDialog(ventanaInicio,
                        "️ No hay proveedores registrados. Debe registrarlos el administrador.",
                        "Sin proveedores", JOptionPane.WARNING_MESSAGE);
                return;
            }
            VentanaSeleccionTipoProveedor seleccion = new VentanaSeleccionTipoProveedor();
            new GestorSeleccionTipoProveedor(seleccion, gestorProveedores);
            seleccion.setVisible(true);
            ventanaInicio.setVisible(false);

        // Administradores
        } else if (source == ventanaInicio.btnAdministradores) {
            FormularioInicioSesionAdministrador loginAdmin = new FormularioInicioSesionAdministrador();
            new GestorInicioSesionAdministrador(loginAdmin, gestorProveedores);
            loginAdmin.setVisible(true);
            ventanaInicio.setVisible(false);

        // Acción no reconocida
        } else {
            JOptionPane.showMessageDialog(ventanaInicio, "Acción no reconocida");
        }
    }
}


===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/constructor/GestorVentanaInicioUsuario.java =====

package udistrital.avanzada.rolapet.constructor;

import udistrital.avanzada.rolapet.vista.VentanaInicioUsuario;
import udistrital.avanzada.rolapet.vista.VentanaRegistroVehiculo;
import udistrital.avanzada.rolapet.vista.VentanaInicio;
import udistrital.avanzada.rolapet.modelo.Publicacion;
import udistrital.avanzada.rolapet.modelo.Usuario;
import udistrital.avanzada.rolapet.modelo.RepositorioUsuarios;
import udistrital.avanzada.rolapet.modelo.RepositorioPublicaciones;
import udistrital.avanzada.rolapet.modelo.Vehiculo;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 * Gestor de la ventana inicio de usuario.
 * Corrige fallback al cerrar sesión y muestra correctamente publicaciones de proveedores.
 */
/**
 * Class GestorVentanaInicioUsuario.
 */
/**
 * Class GestorVentanaInicioUsuario.
 */
public class GestorVentanaInicioUsuario implements ActionListener {
    private VentanaInicioUsuario ventana;
    private Usuario usuarioActual;
    private RepositorioUsuarios repositorioUsuarios;
    private RepositorioPublicaciones repoPublicaciones;
    private JFrame ventanaPrincipal;

    public GestorVentanaInicioUsuario(VentanaInicioUsuario ventana,
                                      Usuario usuarioActual,
                                      RepositorioUsuarios repositorioUsuarios,
                                      RepositorioPublicaciones repoPublicaciones,
                                      JFrame ventanaPrincipal) {
        this.ventana = ventana;
        this.usuarioActual = usuarioActual;
        this.repositorioUsuarios = repositorioUsuarios;
        this.repoPublicaciones = repoPublicaciones;
        this.ventanaPrincipal = ventanaPrincipal;

        // listeners
        ventana.setCerrarSesionListener(this);
        ventana.btnAgregarAmigos.addActionListener(this);
        ventana.btnVerProveedores.addActionListener(this);
        ventana.btnMostrarVehiculos.addActionListener(this);
    }

    @Override
/**
 * actionPerformed method.
 * @param e parameter
 * @return result
 */
/**
 * actionPerformed method.
 * @param e parameter
 */
/**
 * actionPerformed method.
 * @param e parameter
 */
    public void actionPerformed(ActionEvent e) {
        Object source = e.getSource();

        if (source == ventana.btnCerrarSesion) {
            // Cerrar solo la ventana de usuario y volver a la ventana inicial
            JOptionPane.showMessageDialog(ventana, "Has cerrado sesión.");
            ventana.dispose();

            if (ventanaPrincipal != null) {
                // si la ventanaPrincipal fue pasada, la mostramos
                ventanaPrincipal.setVisible(true);
            } else {
                // fallback seguro: reabrir la ventana de inicio principal
                VentanaInicio ventanaInicio = new VentanaInicio();
                ControladorUsuario controladorUsuario = new ControladorUsuario();
                new GestorVentanaInicio(ventanaInicio, controladorUsuario);
                ventanaInicio.setVisible(true);
            }
        }
        else if (source == ventana.btnAgregarAmigos) {
            JOptionPane.showMessageDialog(ventana, "Funcionalidad en desarrollo: agregar amigos.");
        }
        else if (source == ventana.btnVerProveedores) {
            mostrarPublicacionesProveedores();
        }
        else if (source == ventana.btnMostrarVehiculos) {
            mostrarVehiculosUsuario();
        }
    }

/**
 * mostrarPublicacionesProveedores method.
 * @return result
 */
/**
 * mostrarPublicacionesProveedores method.
 */
/**
 * mostrarPublicacionesProveedores method.
 */
    private void mostrarPublicacionesProveedores() {
        if (repoPublicaciones == null || repoPublicaciones.listarPublicaciones().isEmpty()) {
            JOptionPane.showMessageDialog(ventana, "No hay publicaciones de proveedores todavía.");
            return;
        }

        StringBuilder sb = new StringBuilder("📦 Publicaciones de proveedores:\n\n");
        for (Publicacion pub : repoPublicaciones.listarPublicaciones()) {
            // Publicacion.toString() ya formatea título, tipo, autor y fecha
            sb.append(pub.toString()).append("\n");
        }
        JOptionPane.showMessageDialog(ventana, sb.toString(), "Proveedores", JOptionPane.INFORMATION_MESSAGE);
    }

/**
 * mostrarVehiculosUsuario method.
 * @return result
 */
/**
 * mostrarVehiculosUsuario method.
 */
/**
 * mostrarVehiculosUsuario method.
 */
    private void mostrarVehiculosUsuario() {
        StringBuilder sb = new StringBuilder();
        if (usuarioActual == null || usuarioActual.getVehiculos().isEmpty()) {
            sb.append("No tienes vehículos registrados.\n");
        } else {
            sb.append("🚗 Tus vehículos:\n\n");
            for (Vehiculo v : usuarioActual.getVehiculos()) {
                sb.append("- ").append(v.getMarca())
                  .append(" ").append(v.getModelo())
                  .append(" | Placa: ").append(v.getPlaca()).append("\n");
            }
        }
        JOptionPane.showMessageDialog(ventana, sb.toString(), "Mis Vehículos", JOptionPane.INFORMATION_MESSAGE);

        // Opciones: Agregar / Eliminar / Cerrar
        String[] opciones = {"Agregar vehículo", "Eliminar vehículo", "Cerrar"};
        int eleccion = JOptionPane.showOptionDialog(
                ventana,
                "¿Qué acción deseas realizar?",
                "Gestión de Vehículos",
                JOptionPane.DEFAULT_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                opciones,
                opciones[0]
        );

        if (eleccion == 0) { // Agregar
            abrirVentanaRegistroVehiculo();
        } else if (eleccion == 1) { // Eliminar
            eliminarVehiculo();
        }
    }

/**
 * abrirVentanaRegistroVehiculo method.
 * @return result
 */
/**
 * abrirVentanaRegistroVehiculo method.
 */
/**
 * abrirVentanaRegistroVehiculo method.
 */
    private void abrirVentanaRegistroVehiculo() {
        // Usar el constructor existente en el proyecto
        VentanaRegistroVehiculo ventanaRegistro = new VentanaRegistroVehiculo();
        ControladorVehiculo controladorVehiculo = new ControladorVehiculo();
        // Si ya aplicaste la sobrecarga del GestorRegistroVehiculo para pasar usuarioActual,
        // cámbialo aquí a la versión con usuarioActual; mientras tanto usamos la versión existente.
        new GestorRegistroVehiculo(ventanaRegistro, controladorVehiculo);
        ventana.setVisible(false); // ocultar temporalmente la ventana de inicio
    }

/**
 * eliminarVehiculo method.
 * @return result
 */
/**
 * eliminarVehiculo method.
 */
/**
 * eliminarVehiculo method.
 */
    private void eliminarVehiculo() {
        if (usuarioActual == null || usuarioActual.getVehiculos().isEmpty()) {
            JOptionPane.showMessageDialog(ventana, "No hay vehículos para eliminar.");
            return;
        }

        String[] placas = usuarioActual.getVehiculos().stream()
                .map(Vehiculo::getPlaca)
                .toArray(String[]::new);

        String seleccion = (String) JOptionPane.showInputDialog(
                ventana,
                "Selecciona el vehículo a eliminar:",
                "Eliminar Vehículo",
                JOptionPane.PLAIN_MESSAGE,
                null,
                placas,
                placas[0]
        );

        if (seleccion != null) {
            usuarioActual.getVehiculos().removeIf(v -> v.getPlaca().equalsIgnoreCase(seleccion));
            JOptionPane.showMessageDialog(ventana, "Vehículo eliminado: " + seleccion);
        }
    }
}


===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/constructor/GestorVentanaProveedor.java =====

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package udistrital.avanzada.rolapet.constructor;

import udistrital.avanzada.rolapet.vista.VentanaProveedor;
import udistrital.avanzada.rolapet.modelo.Proveedor;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import udistrital.avanzada.rolapet.modelo.Item;
import udistrital.avanzada.rolapet.modelo.RepositorioPublicaciones;
import udistrital.avanzada.rolapet.vista.VentanaCrearPublicacion;

/**
 * Controlador para manejar las acciones de la ventana de proveedor.
 */
import udistrital.avanzada.rolapet.constructor.IGestorProveedor;
import udistrital.avanzada.rolapet.constructor.IGestorPublicacion;

/**
 * Class GestorVentanaProveedor.
 */
/**
 * Class GestorVentanaProveedor.
 */
public class GestorVentanaProveedor implements ActionListener, IGestorProveedor, IGestorPublicacion {
    // Implementación de IGestorProveedor
    @Override
/**
 * crearItem method.
 * @param proveedor parameter
 * @param item parameter
 * @return result
 */
/**
 * crearItem method.
 * @param proveedor parameter
 * @param item parameter
 * @return result
 */
/**
 * crearItem method.
 * @param proveedor parameter
 * @param item parameter
 * @return result
 */
    public boolean crearItem(Proveedor proveedor, Item item) {
        if (proveedor != null && item != null) {
            proveedor.agregarItem(item);
            return true;
        }
        return false;
    }

    @Override
/**
 * actualizarItem method.
 * @param proveedor parameter
 * @param item parameter
 * @return result
 */
/**
 * actualizarItem method.
 * @param proveedor parameter
 * @param item parameter
 * @return result
 */
/**
 * actualizarItem method.
 * @param proveedor parameter
 * @param item parameter
 * @return result
 */
    public boolean actualizarItem(Proveedor proveedor, Item item) {
        // Ejemplo simple: busca por id y reemplaza
        for (int i = 0; i < proveedor.getItems().size(); i++) {
            if (proveedor.getItems().get(i).getId().equals(item.getId())) {
                proveedor.getItems().set(i, item);
                return true;
            }
        }
        return false;
    }

    @Override
/**
 * eliminarItem method.
 * @param proveedor parameter
 * @param item parameter
 * @return result
 */
/**
 * eliminarItem method.
 * @param proveedor parameter
 * @param item parameter
 * @return result
 */
/**
 * eliminarItem method.
 * @param proveedor parameter
 * @param item parameter
 * @return result
 */
    public boolean eliminarItem(Proveedor proveedor, Item item) {
        return proveedor.getItems().remove(item);
    }

    @Override
/**
 * listarItems method.
 * @param proveedor parameter
 * @return result
 */
/**
 * listarItems method.
 * @param proveedor parameter
 * @return result
 */
/**
 * listarItems method.
 * @param proveedor parameter
 * @return result
 */
    public java.util.List<Item> listarItems(Proveedor proveedor) {
        return proveedor.getItems();
    }

    @Override
/**
 * listarProveedores method.
 * @return result
 */
/**
 * listarProveedores method.
 * @return result
 */
/**
 * listarProveedores method.
 * @return result
 */
    public java.util.List<Proveedor> listarProveedores() {
        // Aquí podrías acceder a un repositorio global de proveedores
        java.util.List<Proveedor> lista = new java.util.ArrayList<>();
        lista.add(proveedor);
        return lista;
    }

    // Implementación de IGestorPublicacion
    @Override
/**
 * crearPublicacion method.
 * @param proveedor parameter
 * @param publicacion parameter
 * @return result
 */
/**
 * crearPublicacion method.
 * @param proveedor parameter
 * @param publicacion parameter
 * @return result
 */
/**
 * crearPublicacion method.
 * @param proveedor parameter
 * @param publicacion parameter
 * @return result
 */
    public boolean crearPublicacion(Proveedor proveedor, udistrital.avanzada.rolapet.modelo.Publicacion publicacion) {
        if (proveedor != null && publicacion != null) {
            proveedor.agregarPublicacion(publicacion);
            repoPublicaciones.agregarPublicacion(publicacion);
            return true;
        }
        return false;
    }

    @Override
/**
 * actualizarPublicacion method.
 * @param proveedor parameter
 * @param publicacion parameter
 * @return result
 */
/**
 * actualizarPublicacion method.
 * @param proveedor parameter
 * @param publicacion parameter
 * @return result
 */
/**
 * actualizarPublicacion method.
 * @param proveedor parameter
 * @param publicacion parameter
 * @return result
 */
    public boolean actualizarPublicacion(Proveedor proveedor, udistrital.avanzada.rolapet.modelo.Publicacion publicacion) {
        // Ejemplo simple: busca por título y reemplaza
        for (int i = 0; i < proveedor.getPublicaciones().size(); i++) {
            if (proveedor.getPublicaciones().get(i).getTitulo().equals(publicacion.getTitulo())) {
                proveedor.getPublicaciones().set(i, publicacion);
                return true;
            }
        }
        return false;
    }

    @Override
/**
 * eliminarPublicacion method.
 * @param proveedor parameter
 * @param publicacion parameter
 * @return result
 */
/**
 * eliminarPublicacion method.
 * @param proveedor parameter
 * @param publicacion parameter
 * @return result
 */
/**
 * eliminarPublicacion method.
 * @param proveedor parameter
 * @param publicacion parameter
 * @return result
 */
    public boolean eliminarPublicacion(Proveedor proveedor, udistrital.avanzada.rolapet.modelo.Publicacion publicacion) {
        proveedor.getPublicaciones().remove(publicacion);
        return repoPublicaciones.listarPublicaciones().remove(publicacion);
    }

    @Override
/**
 * listarPublicaciones method.
 * @param proveedor parameter
 * @return result
 */
/**
 * listarPublicaciones method.
 * @param proveedor parameter
 * @return result
 */
/**
 * listarPublicaciones method.
 * @param proveedor parameter
 * @return result
 */
    public java.util.List<udistrital.avanzada.rolapet.modelo.Publicacion> listarPublicaciones(Proveedor proveedor) {
        return proveedor.getPublicaciones();
    }

    @Override
/**
 * listarTodasPublicaciones method.
 * @return result
 */
/**
 * listarTodasPublicaciones method.
 * @return result
 */
/**
 * listarTodasPublicaciones method.
 * @return result
 */
    public java.util.List<udistrital.avanzada.rolapet.modelo.Publicacion> listarTodasPublicaciones() {
        return repoPublicaciones.listarPublicaciones();
    }

    private VentanaProveedor vista;
    private Proveedor proveedor;

    private RepositorioPublicaciones repoPublicaciones;

    public GestorVentanaProveedor(VentanaProveedor vista, Proveedor proveedor, RepositorioPublicaciones repoPublicaciones) {
        this.vista = vista;
        this.proveedor = proveedor;
        this.repoPublicaciones = repoPublicaciones;
        this.vista.setControlador(this);
    }

    @Override
/**
 * actionPerformed method.
 * @param e parameter
 * @return result
 */
/**
 * actionPerformed method.
 * @param e parameter
 */
/**
 * actionPerformed method.
 * @param e parameter
 */
    public void actionPerformed(ActionEvent e) {
        Object source = e.getSource();

        if (source == vista.getBtnVerPublicaciones()) {
            udistrital.avanzada.rolapet.vista.VentanaGestionPublicacionesProveedor ventanaPubs = new udistrital.avanzada.rolapet.vista.VentanaGestionPublicacionesProveedor(proveedor.getPublicaciones());
            new GestorGestionPublicacionesProveedor(ventanaPubs, proveedor, this);
            ventanaPubs.setVisible(true);

        
        } else if (source == vista.getBtnCrearPublicacion()) {
            // Abrir ventana para crear publicación
            new VentanaCrearPublicacion(proveedor, repoPublicaciones).setVisible(true);

    } else if (source == vista.getBtnCerrarSesion()) {
        JOptionPane.showMessageDialog(vista,
            "Sesión cerrada correctamente.",
            "Cerrar sesión", JOptionPane.INFORMATION_MESSAGE);
        vista.dispose();
        udistrital.avanzada.rolapet.vista.VentanaInicio ventanaInicio = new udistrital.avanzada.rolapet.vista.VentanaInicio();
        new GestorVentanaInicio(ventanaInicio, new ControladorUsuario());
        ventanaInicio.setVisible(true);
        } else if (source == vista.getBtnAgregarItem()) {
            udistrital.avanzada.rolapet.vista.VentanaGestionItemsProveedor ventanaItems = new udistrital.avanzada.rolapet.vista.VentanaGestionItemsProveedor(proveedor.getItems());
            new GestorGestionItemsProveedor(ventanaItems, proveedor, this);
            ventanaItems.setVisible(true);

    }
}
}

===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/constructor/GestorVentanaUsuarios.java =====

package udistrital.avanzada.rolapet.constructor;

import udistrital.avanzada.rolapet.vista.*;
import udistrital.avanzada.rolapet.modelo.Usuario;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 * Clase GestorVentanaUsuarios.
 * Maneja los eventos y la lógica de la interacción entre la ventana de usuarios y la ventana de inicio.
 * Controla la navegación entre formularios de inicio de sesión, registro y la ventana principal.
 * 
 * @author Sarita
 * @version 1.4, 27-09-2025
 */
/**
 * Class GestorVentanaUsuarios.
 */
/**
 * Class GestorVentanaUsuarios.
 */
public class GestorVentanaUsuarios implements ActionListener {

    private VentanaUsuarios ventanaUsuarios;
    private VentanaInicio ventanaInicio;
    private ControladorUsuario controladorUsuario;
    private FormularioInicioSesion formularioInicioSesion;

    public GestorVentanaUsuarios(VentanaUsuarios ventanaUsuarios, VentanaInicio ventanaInicio, ControladorUsuario controladorUsuario) {
        this.ventanaUsuarios = ventanaUsuarios;
        this.ventanaInicio = ventanaInicio;
        this.controladorUsuario = controladorUsuario;

        this.ventanaUsuarios.setControlador(this);
    }

    @Override
/**
 * actionPerformed method.
 * @param e parameter
 * @return result
 */
/**
 * actionPerformed method.
 * @param e parameter
 */
/**
 * actionPerformed method.
 * @param e parameter
 */
    public void actionPerformed(ActionEvent e) {
        Object source = e.getSource();

        // --- Cerrar sesión: cualquier ventana que tenga este botón ---
        if (source instanceof JButton && ((JButton) source).getText().equals("Cerrar sesión")) {
            JButton btn = (JButton) source;
            Window win = SwingUtilities.getWindowAncestor(btn);
            if (win != null) {
                win.dispose();              // Cierra la ventana actual
            }
            ventanaInicio.setVisible(true); // Muestra la ventana de inicio
            return;
        }

        // --- Botón "Atrás" de formulario de inicio de sesión ---
        if (formularioInicioSesion != null && source == formularioInicioSesion.getBtnAtras()) {
            formularioInicioSesion.dispose();
            ventanaUsuarios.setVisible(true);
            return;
        }

        // --- Botón "Iniciar sesión" de ventanaUsuarios ---
        if (source == ventanaUsuarios.btnIniciarSesion) {
            formularioInicioSesion = new FormularioInicioSesion();
            formularioInicioSesion.setControlador(this);
            formularioInicioSesion.setVisible(true);
            ventanaUsuarios.setVisible(false);
            return;
        }

        // --- Botón "Ingresar" de formulario de inicio de sesión ---
        if (formularioInicioSesion != null && source == formularioInicioSesion.getBtnIngresar()) {
            String usuario = formularioInicioSesion.getUsuario();
            String contrasena = formularioInicioSesion.getContrasena();

            Usuario u = controladorUsuario.buscarPorNombreUsuario(usuario);
            if (u != null && u.getContrasena().equals(contrasena)) {
                JOptionPane.showMessageDialog(formularioInicioSesion, "Inicio de sesión exitoso");
                formularioInicioSesion.dispose();
                ventanaUsuarios.dispose();
                ventanaInicio.dispose();

                VentanaRegistroVehiculo ventanaRegistro = new VentanaRegistroVehiculo();
                ControladorVehiculo controladorVehiculo = new ControladorVehiculo();
                new GestorRegistroVehiculo(ventanaRegistro, controladorVehiculo);

            } else {
                JOptionPane.showMessageDialog(formularioInicioSesion, "Usuario o contraseña incorrectos");
            }
            return;
        }

        // --- Botón "Cancelar" del formulario de inicio de sesión ---
        if (formularioInicioSesion != null && source == formularioInicioSesion.getBtnCancelar()) {
            formularioInicioSesion.dispose();
            ventanaUsuarios.setVisible(true);
            return;
        }

        // --- Botón "Registrarse" de ventanaUsuarios ---
        if (source == ventanaUsuarios.btnRegistrarse) {
            FormularioRegistroCliente formularioRegistroCliente = new FormularioRegistroCliente();
            new GestorRegistroCliente(formularioRegistroCliente, ventanaUsuarios, controladorUsuario);
            formularioRegistroCliente.setVisible(true);
            ventanaUsuarios.setVisible(false);
            return;
        }

        // --- Botón "Atrás" de ventanaUsuarios ---
        if (source == ventanaUsuarios.btnAtras) {
            ventanaUsuarios.dispose();
            ventanaInicio.setVisible(true);
        }
    }
}


===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/constructor/IGestorProveedor.java =====

package udistrital.avanzada.rolapet.constructor;

import udistrital.avanzada.rolapet.modelo.Item;
import udistrital.avanzada.rolapet.modelo.Proveedor;
import java.util.List;

/**
 * Contrato para la gestión de proveedores y sus ítems.
 */
/**
 * Interface IGestorProveedor.
 */
/**
 * Interface IGestorProveedor.
 */
public interface IGestorProveedor {
    boolean crearItem(Proveedor proveedor, Item item);
    boolean actualizarItem(Proveedor proveedor, Item item);
    boolean eliminarItem(Proveedor proveedor, Item item);
    List<Item> listarItems(Proveedor proveedor);
    List<Proveedor> listarProveedores();
}


===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/constructor/IGestorPublicacion.java =====

package udistrital.avanzada.rolapet.constructor;

import udistrital.avanzada.rolapet.modelo.Publicacion;
import udistrital.avanzada.rolapet.modelo.Proveedor;
import java.util.List;

/**
 * Contrato para la gestión de publicaciones (eventos, promociones, etc.).
 */
/**
 * Interface IGestorPublicacion.
 */
/**
 * Interface IGestorPublicacion.
 */
public interface IGestorPublicacion {
    boolean crearPublicacion(Proveedor proveedor, Publicacion publicacion);
    boolean actualizarPublicacion(Proveedor proveedor, Publicacion publicacion);
    boolean eliminarPublicacion(Proveedor proveedor, Publicacion publicacion);
    List<Publicacion> listarPublicaciones(Proveedor proveedor);
    List<Publicacion> listarTodasPublicaciones();
}


===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/main/Main.java =====

package udistrital.avanzada.rolapet.main;


import javax.swing.SwingUtilities;
import udistrital.avanzada.rolapet.constructor.ControladorUsuario;
import udistrital.avanzada.rolapet.constructor.GestorVentanaInicio;
import udistrital.avanzada.rolapet.vista.VentanaInicio;

/**
 * Clase Main que contiene el método principal para iniciar la aplicación.
 * Inicializa el controlador de usuarios, la ventana inicial y su gestor,
 * y muestra la ventana inicial al usuario.
 * 
 * @author Sarita
 * @version 1.1, 21-09-2025
 */
/**
 * Class Main.
 */
/**
 * Class Main.
 */
public class Main {
/**
 * main method.
 * @param args parameter
 * @return result
 */
    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            ControladorUsuario controladorUsuario = new ControladorUsuario();
            VentanaInicio ventanaInicio = new VentanaInicio();
            GestorVentanaInicio gestorInicio = new GestorVentanaInicio(ventanaInicio, controladorUsuario);
            ventanaInicio.setVisible(true);
        });
    }
}


===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/modelo/Administrador.java =====

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package udistrital.avanzada.rolapet.modelo;

import java.util.List;

/**
 *
 * @author sarit
 */
/**
 * Class Administrador.
 */
/**
 * Class Administrador.
 */
public class Administrador extends Persona {
    public Administrador(String nombre, String apellido, String cedula, String correo, String celular){
        super(nombre, apellido, cedula, correo, celular);
               
    }
/**
 * registrarProveedor method.
 * @param proveedor parameter
 * @param listaProveedores parameter
 * @return result
 */
/**
 * registrarProveedor method.
 * @param proveedor parameter
 * @param listaProveedores parameter
 */
/**
 * registrarProveedor method.
 * @param proveedor parameter
 * @param listaProveedores parameter
 */
    public void registrarProveedor(Proveedor proveedor, List<Proveedor> listaProveedores){
        if (proveedor !=null && listaProveedores != null){
            listaProveedores.add(proveedor);
        }
    }
}


===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/modelo/Cliente.java =====

package udistrital.avanzada.rolapet.modelo;

/**
 * Clase Cliente que extiende Usuario.
 * Representa un usuario cliente del sistema con sus datos personales y de acceso.
 * Hereda todos los atributos y métodos de la clase Usuario.
 * 
 * @author Sarita
 * @version 1.1, 25-09-2025
 */
/**
 * Class Cliente.
 */
/**
 * Class Cliente.
 */
public class Cliente extends Usuario {

    /**
     * Constructor que crea un nuevo cliente con la información proporcionada.
     * 
     * @param nombreUsuario nombre de usuario único para autenticación
     * @param contrasena contraseña del cliente
     * @param nombre nombre propio del cliente
     * @param apellido apellido del cliente
     * @param cedula número de cédula o documento de identificación
     * @param correo correo electrónico de contacto
     * @param celular número de teléfono celular
     */
    public Cliente(String nombreUsuario, String contrasena, String nombre, String apellido,
                   String cedula, String correo, String celular) {
        super(nombreUsuario, contrasena, nombre, apellido, cedula, correo, celular);
    }

}


===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/modelo/Item.java =====

package udistrital.avanzada.rolapet.modelo;

/**
 * Class Item.
 */
/**
 * Class Item.
 */
public class Item {
    private String id;
    private String titulo;
    private String descripcion;
    private double precio;

    public Item(String id, String titulo, String descripcion, double precio) {
        this.id = id;
        this.titulo = titulo;
        this.descripcion = descripcion;
        this.precio = precio;
    }

/**
 * getId method.
 * @return result
 */
/**
 * getId method.
 * @return result
 */
/**
 * getId method.
 * @return result
 */
    public String getId() {
        return id;
    }

/**
 * getTitulo method.
 * @return result
 */
/**
 * getTitulo method.
 * @return result
 */
/**
 * getTitulo method.
 * @return result
 */
    public String getTitulo() {
        return titulo;
    }

/**
 * getDescripcion method.
 * @return result
 */
/**
 * getDescripcion method.
 * @return result
 */
/**
 * getDescripcion method.
 * @return result
 */
    public String getDescripcion() {
        return descripcion;
    }

/**
 * getPrecio method.
 * @return result
 */
/**
 * getPrecio method.
 * @return result
 */
/**
 * getPrecio method.
 * @return result
 */
    public double getPrecio() {
        return precio;
    }

    @Override
/**
 * toString method.
 * @return result
 */
/**
 * toString method.
 * @return result
 */
/**
 * toString method.
 * @return result
 */
    public String toString() {
        return titulo + " - " + descripcion + " ($" + precio + ")";
    }
}


===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/modelo/MotoElectrica.java =====

package udistrital.avanzada.rolapet.modelo;

/**
 * Clase MotoElectrica que extiende Vehiculo.
 * Representa una motocicleta eléctrica con características específicas adicionales
 * como frenos de disco, suspensión de alta calidad, luces LED y alarma antirrobo.
 * 
 * @author Sarita
 * @version 1.1, 25-09-2025
 */
/**
 * Class MotoElectrica.
 */
/**
 * Class MotoElectrica.
 */
public class MotoElectrica extends Vehiculo {
    private boolean frenosDisco;
    private boolean suspensionAltaCalidad;
    private boolean lucesLED;
    private boolean alarmaAntiRobo;

    /**
     * Constructor que crea una moto eléctrica con sus características específicas
     * además de las propiedades comunes a todos los vehículos.
     * 
     * @param marca marca del vehículo
     * @param modelo modelo del vehículo
     * @param autonomiaKm autonomía en kilómetros
     * @param potenciaNominalW potencia nominal en vatios
     * @param velocidadMaxKmh velocidad máxima en km/h
     * @param frenosDisco indica si tiene frenos de disco
     * @param suspensionAltaCalidad indica si tiene suspensión de alta calidad
     * @param lucesLED indica si cuenta con luces LED
     * @param alarmaAntiRobo indica si tiene alarma anti robo
     */
    public MotoElectrica(String marca, String modelo, String placa, double autonomiaKm, int potenciaNominalW, double velocidadMaxKmh,
                         boolean frenosDisco, boolean suspensionAltaCalidad, boolean lucesLED, boolean alarmaAntiRobo) {
        super(marca, modelo, placa, autonomiaKm, potenciaNominalW, velocidadMaxKmh);
        this.frenosDisco = frenosDisco;
        this.suspensionAltaCalidad = suspensionAltaCalidad;
        this.lucesLED = lucesLED;
        this.alarmaAntiRobo = alarmaAntiRobo;
    }

/**
 * isFrenosDisco method.
 * @return result
 */
/**
 * isFrenosDisco method.
 * @return result
 */
/**
 * isFrenosDisco method.
 * @return result
 */
    public boolean isFrenosDisco() { return frenosDisco; }
/**
 * setFrenosDisco method.
 * @param frenosDisco parameter
 * @return result
 */
/**
 * setFrenosDisco method.
 * @param frenosDisco parameter
 */
/**
 * setFrenosDisco method.
 * @param frenosDisco parameter
 */
    public void setFrenosDisco(boolean frenosDisco) { this.frenosDisco = frenosDisco; }

/**
 * isSuspensionAltaCalidad method.
 * @return result
 */
/**
 * isSuspensionAltaCalidad method.
 * @return result
 */
/**
 * isSuspensionAltaCalidad method.
 * @return result
 */
    public boolean isSuspensionAltaCalidad() { return suspensionAltaCalidad; }
/**
 * setSuspensionAltaCalidad method.
 * @param suspensionAltaCalidad parameter
 * @return result
 */
/**
 * setSuspensionAltaCalidad method.
 * @param suspensionAltaCalidad parameter
 */
/**
 * setSuspensionAltaCalidad method.
 * @param suspensionAltaCalidad parameter
 */
    public void setSuspensionAltaCalidad(boolean suspensionAltaCalidad) { this.suspensionAltaCalidad = suspensionAltaCalidad; }

/**
 * isLucesLED method.
 * @return result
 */
/**
 * isLucesLED method.
 * @return result
 */
/**
 * isLucesLED method.
 * @return result
 */
    public boolean isLucesLED() { return lucesLED; }
/**
 * setLucesLED method.
 * @param lucesLED parameter
 * @return result
 */
/**
 * setLucesLED method.
 * @param lucesLED parameter
 */
/**
 * setLucesLED method.
 * @param lucesLED parameter
 */
    public void setLucesLED(boolean lucesLED) { this.lucesLED = lucesLED; }

/**
 * isAlarmaAntiRobo method.
 * @return result
 */
/**
 * isAlarmaAntiRobo method.
 * @return result
 */
/**
 * isAlarmaAntiRobo method.
 * @return result
 */
    public boolean isAlarmaAntiRobo() { return alarmaAntiRobo; }
/**
 * setAlarmaAntiRobo method.
 * @param alarmaAntiRobo parameter
 * @return result
 */
/**
 * setAlarmaAntiRobo method.
 * @param alarmaAntiRobo parameter
 */
/**
 * setAlarmaAntiRobo method.
 * @param alarmaAntiRobo parameter
 */
    public void setAlarmaAntiRobo(boolean alarmaAntiRobo) { this.alarmaAntiRobo = alarmaAntiRobo; }

    /**
     * Retorna la descripción completa del vehículo incluyendo las características propias
     * de la moto eléctrica.
     * 
     * @return descripción detallada del vehículo
     */
    @Override
/**
 * getDescripcion method.
 * @return result
 */
/**
 * getDescripcion method.
 * @return result
 */
/**
 * getDescripcion method.
 * @return result
 */
    public String getDescripcion() {
        return super.getDescripcion() +
                ", Frenos de disco: " + (frenosDisco ? "Sí" : "No") +
                ", Suspensión alta calidad: " + (suspensionAltaCalidad ? "Sí" : "No") +
                ", Luces LED: " + (lucesLED ? "Sí" : "No") +
                ", Alarma anti robo: " + (alarmaAntiRobo ? "Sí" : "No");
    }
}


===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/modelo/Persona.java =====

package udistrital.avanzada.rolapet.modelo;

/**
 * Representa una persona con datos básicos de identificación y contacto.
 * Contiene los atributos nombre, apellido, cédula, correo y celular.
 * <p>
 * MODIFICACIÓN: Se agregaron validaciones en los setters de cédula, correo y celular
 * para asegurar formatos correctos y lanzar IllegalArgumentException en caso de datos inválidos.
 * </p>
 * 
 * @author Sarita
 * @version 1.2, 26-09-2025
 */
/**
 * Class Persona.
 */
/**
 * Class Persona.
 */
public class Persona {
    private String nombre;
    private String apellido;
    private String cedula;
    private String correo;
    private String celular;

    /**
     * Constructor que inicializa una persona con todos sus atributos.
     * La cédula, correo y celular se asignan usando setters validados.
     * 
     * @param nombre Nombre de la persona.
     * @param apellido Apellido de la persona.
     * @param cedula Número de cédula (solo dígitos).
     * @param correo Correo electrónico válido.
     * @param celular Número de celular (10 dígitos).
     */
    public Persona(String nombre, String apellido, String cedula, String correo, String celular) {
        this.nombre = nombre;
        this.apellido = apellido;
        setCedula(cedula);
        setCorreo(correo);
        setCelular(celular);
    }

/**
 * getNombre method.
 * @return result
 */
/**
 * getNombre method.
 * @return result
 */
/**
 * getNombre method.
 * @return result
 */
    public String getNombre() {
        return nombre;
    }
/**
 * setNombre method.
 * @param nombre parameter
 * @return result
 */
/**
 * setNombre method.
 * @param nombre parameter
 */
/**
 * setNombre method.
 * @param nombre parameter
 */
    public void setNombre(String nombre) {
        this.nombre = nombre;
    }

/**
 * getApellido method.
 * @return result
 */
/**
 * getApellido method.
 * @return result
 */
/**
 * getApellido method.
 * @return result
 */
    public String getApellido() {
        return apellido;
    }
/**
 * setApellido method.
 * @param apellido parameter
 * @return result
 */
/**
 * setApellido method.
 * @param apellido parameter
 */
/**
 * setApellido method.
 * @param apellido parameter
 */
    public void setApellido(String apellido) {
        this.apellido = apellido;
    }

/**
 * getCedula method.
 * @return result
 */
/**
 * getCedula method.
 * @return result
 */
/**
 * getCedula method.
 * @return result
 */
    public String getCedula() {
        return cedula;
    }

    /**
     * Establece el número de cédula.
     * MODIFICACIÓN: Valida que la cédula contenga solo dígitos.
     * 
     * @param cedula cédula a asignar (solo números enteros)
     * @throws IllegalArgumentException si la cédula no contiene solo números
     */
/**
 * setCedula method.
 * @param cedula parameter
 * @return result
 */
/**
 * setCedula method.
 * @param cedula parameter
 */
/**
 * setCedula method.
 * @param cedula parameter
 */
    public void setCedula(String cedula) {
        if (cedula != null && cedula.matches("\\d+")) {
            this.cedula = cedula;
        } else {
            throw new IllegalArgumentException("Cédula debe contener solo números enteros.");
        }
    }

/**
 * getCorreo method.
 * @return result
 */
/**
 * getCorreo method.
 * @return result
 */
/**
 * getCorreo method.
 * @return result
 */
    public String getCorreo() {
        return correo;
    }

    /**
     * Establece el correo electrónico.
     * MODIFICACIÓN: Valida que el correo contenga '@' y al menos un '.' después.
     * 
     * @param correo correo a asignar (valido)
     * @throws IllegalArgumentException si el correo no es válido
     */
/**
 * setCorreo method.
 * @param correo parameter
 * @return result
 */
/**
 * setCorreo method.
 * @param correo parameter
 */
/**
 * setCorreo method.
 * @param correo parameter
 */
    public void setCorreo(String correo) {
        if (correo != null && correo.matches("^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$")) {
            this.correo = correo;
        } else {
            throw new IllegalArgumentException("Correo inválido. Debe contener '@' y un '.' después.");
        }
    }

/**
 * getCelular method.
 * @return result
 */
/**
 * getCelular method.
 * @return result
 */
/**
 * getCelular method.
 * @return result
 */
    public String getCelular() {
        return celular;
    }

    /**
     * Establece el número de celular.
     * MODIFICACIÓN: Valida que celular contenga exactamente 10 dígitos numéricos.
     * 
     * @param celular número de celular a asignar (exactamente 10 dígitos)
     * @throws IllegalArgumentException si celular no tiene 10 números
     */
/**
 * setCelular method.
 * @param celular parameter
 * @return result
 */
/**
 * setCelular method.
 * @param celular parameter
 */
/**
 * setCelular method.
 * @param celular parameter
 */
    public void setCelular(String celular) {
        if (celular != null && celular.matches("\\d{10}")) {
            this.celular = celular;
        } else {
            throw new IllegalArgumentException("Celular debe contener exactamente 10 números.");
        }
    }
}


===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/modelo/Proveedor.java =====

package udistrital.avanzada.rolapet.modelo;

import java.util.ArrayList;
import java.util.List;

/**
 * Class Proveedor.
 */
/**
 * Class Proveedor.
 */
public class Proveedor extends Usuario {
    private String tipoProveedor;

    private List<Publicacion> publicaciones;
    private List<Item> items;

    public Proveedor(String nombreUsuario, String contrasena, String tipoProveedor,
                     String nombre, String apellido, String cedula,
                     String correo, String celular) {
        super(nombreUsuario, contrasena, nombre, apellido, cedula, correo, celular);
        this.tipoProveedor = tipoProveedor;
        this.publicaciones = new ArrayList<>();
        this.items = new ArrayList<>();
    }

/**
 * getTipoProveedor method.
 * @return result
 */
/**
 * getTipoProveedor method.
 * @return result
 */
/**
 * getTipoProveedor method.
 * @return result
 */
    public String getTipoProveedor() {
        return tipoProveedor;
    }

/**
 * getPublicaciones method.
 * @return result
 */
/**
 * getPublicaciones method.
 * @return result
 */
/**
 * getPublicaciones method.
 * @return result
 */
    public List<Publicacion> getPublicaciones() {
        return publicaciones;
    }

/**
 * getItems method.
 * @return result
 */
/**
 * getItems method.
 * @return result
 */
/**
 * getItems method.
 * @return result
 */
    public List<Item> getItems() {
        return items;
    }

/**
 * agregarPublicacion method.
 * @param publicacion parameter
 * @return result
 */
/**
 * agregarPublicacion method.
 * @param publicacion parameter
 */
/**
 * agregarPublicacion method.
 * @param publicacion parameter
 */
    public void agregarPublicacion(Publicacion publicacion) {
        publicaciones.add(publicacion);
    }

/**
 * agregarItem method.
 * @param item parameter
 * @return result
 */
/**
 * agregarItem method.
 * @param item parameter
 */
/**
 * agregarItem method.
 * @param item parameter
 */
    public void agregarItem(Item item) {
        items.add(item);
    }
}


===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/modelo/ProveedorInsumo.java =====

package udistrital.avanzada.rolapet.modelo;

/**
 * Class ProveedorInsumo.
 */
/**
 * Class ProveedorInsumo.
 */
public class ProveedorInsumo extends Proveedor {

    public ProveedorInsumo(String nombreUsuario, String contrasena,
                           String nombre, String apellido, String cedula,
                           String correo, String celular) {
        super(nombreUsuario, contrasena, "Insumo", nombre, apellido, cedula, correo, celular);
    }

    @Override
/**
 * getTipoProveedor method.
 * @return result
 */
/**
 * getTipoProveedor method.
 * @return result
 */
/**
 * getTipoProveedor method.
 * @return result
 */
    public String getTipoProveedor() {
        return "Insumo";
    }
}


===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/modelo/ProveedorServicio.java =====

package udistrital.avanzada.rolapet.modelo;

/**
 * Class ProveedorServicio.
 */
/**
 * Class ProveedorServicio.
 */
public class ProveedorServicio extends Proveedor {

    public ProveedorServicio(String nombreUsuario, String contrasena,
                             String nombre, String apellido, String cedula,
                             String correo, String celular) {
        super(nombreUsuario, contrasena, "Servicio", nombre, apellido, cedula, correo, celular);
    }

    @Override
/**
 * getTipoProveedor method.
 * @return result
 */
/**
 * getTipoProveedor method.
 * @return result
 */
/**
 * getTipoProveedor method.
 * @return result
 */
    public String getTipoProveedor() {
        return "Servicio";
    }
}


===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/modelo/Publicacion.java =====

package udistrital.avanzada.rolapet.modelo;

import java.time.LocalDate;

/**
 * Class Publicacion.
 */
/**
 * Class Publicacion.
 */
public class Publicacion {
    private String id;
    private String titulo;
    private String descripcion;
    private String tipo; // "Evento", "Promoción", etc.
    private Usuario autor;
    private LocalDate fecha;

    public Publicacion(String id, String titulo, String descripcion, String tipo, Usuario autor, LocalDate fecha) {
        this.id = id;
        this.titulo = titulo;
        this.descripcion = descripcion;
        this.tipo = tipo;
        this.autor = autor;
        this.fecha = fecha;
    }

/**
 * getId method.
 * @return result
 */
/**
 * getId method.
 * @return result
 */
/**
 * getId method.
 * @return result
 */
    public String getId() { return id; }
/**
 * getTitulo method.
 * @return result
 */
/**
 * getTitulo method.
 * @return result
 */
/**
 * getTitulo method.
 * @return result
 */
    public String getTitulo() { return titulo; }
/**
 * getDescripcion method.
 * @return result
 */
/**
 * getDescripcion method.
 * @return result
 */
/**
 * getDescripcion method.
 * @return result
 */
    public String getDescripcion() { return descripcion; }
/**
 * getTipo method.
 * @return result
 */
/**
 * getTipo method.
 * @return result
 */
/**
 * getTipo method.
 * @return result
 */
    public String getTipo() { return tipo; }
/**
 * getAutor method.
 * @return result
 */
/**
 * getAutor method.
 * @return result
 */
/**
 * getAutor method.
 * @return result
 */
    public Usuario getAutor() { return autor; }
/**
 * getFecha method.
 * @return result
 */
/**
 * getFecha method.
 * @return result
 */
/**
 * getFecha method.
 * @return result
 */
    public LocalDate getFecha() { return fecha; }

    @Override
/**
 * toString method.
 * @return result
 */
/**
 * toString method.
 * @return result
 */
/**
 * toString method.
 * @return result
 */
    public String toString() {
        return String.format("[%s] %s (%s) - %s\nAutor: %s | Fecha: %s",
                tipo, titulo, id, descripcion,
                autor != null ? autor.getNombreUsuario() : "", fecha != null ? fecha.toString() : "");
    }
}


===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/modelo/RepositorioPublicaciones.java =====

package udistrital.avanzada.rolapet.modelo;

import java.util.ArrayList;
import java.util.List;

/**
 * Repositorio para almacenar y gestionar publicaciones (eventos/promociones).
 * @author Sarita
 * @version 1.0, 27-09-2025
 */
/**
 * Class RepositorioPublicaciones.
 */
/**
 * Class RepositorioPublicaciones.
 */
public class RepositorioPublicaciones {
    private List<Publicacion> publicaciones;

    public RepositorioPublicaciones() {
        publicaciones = new ArrayList<>();
    }

    /**
     * Agrega una publicación al repositorio.
     */
/**
 * agregarPublicacion method.
 * @param publicacion parameter
 * @return result
 */
/**
 * agregarPublicacion method.
 * @param publicacion parameter
 */
/**
 * agregarPublicacion method.
 * @param publicacion parameter
 */
    public void agregarPublicacion(Publicacion publicacion) {
        publicaciones.add(publicacion);
    }

    /**
     * Devuelve la lista de todas las publicaciones.
     */
/**
 * listarPublicaciones method.
 * @return result
 */
/**
 * listarPublicaciones method.
 * @return result
 */
/**
 * listarPublicaciones method.
 * @return result
 */
    public List<Publicacion> listarPublicaciones() {
        return new ArrayList<>(publicaciones);
    }
}


===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/modelo/RepositorioUsuarios.java =====

package udistrital.avanzada.rolapet.modelo;

import java.util.ArrayList;
import java.util.List;

/**
 * Repositorio genérico para almacenar y gestionar usuarios de cualquier tipo.
 * Permite agregar, buscar, eliminar y listar usuarios.
 * Compatible con Cliente, Proveedor, Administrador, etc.
 * 
 * @author Sarita
 * @version 1.0, 27-09-2025
 */
/**
 * Class RepositorioUsuarios.
 */
/**
 * Class RepositorioUsuarios.
 */
public class RepositorioUsuarios {
    private List<Usuario> usuarios;

    public RepositorioUsuarios() {
        usuarios = new ArrayList<>();
    }

    /**
     * Agrega un usuario al repositorio.
     */
/**
 * agregarUsuario method.
 * @param usuario parameter
 * @return result
 */
/**
 * agregarUsuario method.
 * @param usuario parameter
 */
/**
 * agregarUsuario method.
 * @param usuario parameter
 */
    public void agregarUsuario(Usuario usuario) {
        usuarios.add(usuario);
    }

    /**
     * Elimina un usuario del repositorio.
     */
/**
 * eliminarUsuario method.
 * @param usuario parameter
 * @return result
 */
/**
 * eliminarUsuario method.
 * @param usuario parameter
 */
/**
 * eliminarUsuario method.
 * @param usuario parameter
 */
    public void eliminarUsuario(Usuario usuario) {
        usuarios.remove(usuario);
    }

    /**
     * Busca un usuario por nombre de usuario (email).
     */
/**
 * buscarPorNombreUsuario method.
 * @param nombreUsuario parameter
 * @return result
 */
/**
 * buscarPorNombreUsuario method.
 * @param nombreUsuario parameter
 * @return result
 */
/**
 * buscarPorNombreUsuario method.
 * @param nombreUsuario parameter
 * @return result
 */
    public Usuario buscarPorNombreUsuario(String nombreUsuario) {
        for (Usuario u : usuarios) {
            if (u.getNombreUsuario().equalsIgnoreCase(nombreUsuario)) {
                return u;
            }
        }
        return null;
    }

    /**
     * Devuelve la lista de todos los usuarios.
     */
/**
 * listarUsuarios method.
 * @return result
 */
/**
 * listarUsuarios method.
 * @return result
 */
/**
 * listarUsuarios method.
 * @return result
 */
    public List<Usuario> listarUsuarios() {
        return new ArrayList<>(usuarios);
    }
}


===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/modelo/RepositorioVehiculos.java =====

package udistrital.avanzada.rolapet.modelo;

import java.util.ArrayList;
import java.util.List;

/**
 * Repositorio genérico para almacenar y gestionar vehículos de cualquier tipo.
 * Permite agregar, buscar, eliminar y listar vehículos.
 * Compatible con Vehiculo, Scooter, MotoElectrica, etc.
 * 
 * @author Sarita
 * @version 1.0, 27-09-2025
 */
/**
 * Class RepositorioVehiculos.
 */
/**
 * Class RepositorioVehiculos.
 */
public class RepositorioVehiculos {
    private List<Vehiculo> vehiculos;

    public RepositorioVehiculos() {
        vehiculos = new ArrayList<>();
    }

    /**
     * Agrega un vehículo al repositorio.
     */
/**
 * agregarVehiculo method.
 * @param vehiculo parameter
 * @return result
 */
/**
 * agregarVehiculo method.
 * @param vehiculo parameter
 */
/**
 * agregarVehiculo method.
 * @param vehiculo parameter
 */
    public void agregarVehiculo(Vehiculo vehiculo) {
        vehiculos.add(vehiculo);
    }

    /**
     * Elimina un vehículo del repositorio.
     */
/**
 * eliminarVehiculo method.
 * @param vehiculo parameter
 * @return result
 */
/**
 * eliminarVehiculo method.
 * @param vehiculo parameter
 */
/**
 * eliminarVehiculo method.
 * @param vehiculo parameter
 */
    public void eliminarVehiculo(Vehiculo vehiculo) {
        vehiculos.remove(vehiculo);
    }

    /**
     * Busca un vehículo por su placa.
     */
/**
 * buscarPorPlaca method.
 * @param placa parameter
 * @return result
 */
/**
 * buscarPorPlaca method.
 * @param placa parameter
 * @return result
 */
/**
 * buscarPorPlaca method.
 * @param placa parameter
 * @return result
 */
    public Vehiculo buscarPorPlaca(String placa) {
        for (Vehiculo v : vehiculos) {
            if (v.getPlaca().equalsIgnoreCase(placa)) {
                return v;
            }
        }
        return null;
    }

    /**
     * Devuelve la lista de todos los vehículos.
     */
/**
 * listarVehiculos method.
 * @return result
 */
/**
 * listarVehiculos method.
 * @return result
 */
/**
 * listarVehiculos method.
 * @return result
 */
    public List<Vehiculo> listarVehiculos() {
        return new ArrayList<>(vehiculos);
    }
}


===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/modelo/Scooter.java =====

package udistrital.avanzada.rolapet.modelo;

/**
 * Clase Scooter que extiende Vehiculo.
 * Representa un scooter eléctrico con características específicas adicionales
 * como llantas off-road e iluminación avanzada.
 * 
 * @author Sarita
 * @version 1.1, 25-09-2025
 */
/**
 * Class Scooter.
 */
/**
 * Class Scooter.
 */
public class Scooter extends Vehiculo {
    private boolean llantasOffRoad;
    private boolean iluminacionAvanzada;

    /**
     * Constructor que crea un scooter con sus características específicas
     * además de las propiedades comunes a todos los vehículos.
     * 
     * @param marca marca del vehículo
     * @param modelo modelo del vehículo
     * @param autonomiaKm autonomía en kilómetros
     * @param potenciaNominalW potencia nominal en vatios
     * @param velocidadMaxKmh velocidad máxima en km/h
     * @param llantasOffRoad indica si tiene llantas off-road
     * @param iluminacionAvanzada indica si cuenta con iluminación avanzada
     */
    public Scooter(String marca, String modelo, String placa, double autonomiaKm, int potenciaNominalW, double velocidadMaxKmh,
                   boolean llantasOffRoad, boolean iluminacionAvanzada) {
        super(marca, modelo, placa, autonomiaKm, potenciaNominalW, velocidadMaxKmh);
        this.llantasOffRoad = llantasOffRoad;
        this.iluminacionAvanzada = iluminacionAvanzada;
    }

/**
 * isLlantasOffRoad method.
 * @return result
 */
/**
 * isLlantasOffRoad method.
 * @return result
 */
/**
 * isLlantasOffRoad method.
 * @return result
 */
    public boolean isLlantasOffRoad() { return llantasOffRoad; }
/**
 * setLlantasOffRoad method.
 * @param llantasOffRoad parameter
 * @return result
 */
/**
 * setLlantasOffRoad method.
 * @param llantasOffRoad parameter
 */
/**
 * setLlantasOffRoad method.
 * @param llantasOffRoad parameter
 */
    public void setLlantasOffRoad(boolean llantasOffRoad) { this.llantasOffRoad = llantasOffRoad; }

/**
 * isIluminacionAvanzada method.
 * @return result
 */
/**
 * isIluminacionAvanzada method.
 * @return result
 */
/**
 * isIluminacionAvanzada method.
 * @return result
 */
    public boolean isIluminacionAvanzada() { return iluminacionAvanzada; }
/**
 * setIluminacionAvanzada method.
 * @param iluminacionAvanzada parameter
 * @return result
 */
/**
 * setIluminacionAvanzada method.
 * @param iluminacionAvanzada parameter
 */
/**
 * setIluminacionAvanzada method.
 * @param iluminacionAvanzada parameter
 */
    public void setIluminacionAvanzada(boolean iluminacionAvanzada) { this.iluminacionAvanzada = iluminacionAvanzada; }

    /**
     * Retorna la descripción completa del vehículo incluyendo las características propias
     * del scooter eléctrico.
     * 
     * @return descripción detallada del vehículo
     */
    @Override
/**
 * getDescripcion method.
 * @return result
 */
/**
 * getDescripcion method.
 * @return result
 */
/**
 * getDescripcion method.
 * @return result
 */
    public String getDescripcion() {
        return super.getDescripcion() +
                ", Llantas off-road: " + (llantasOffRoad ? "Sí" : "No") +
                ", Iluminación avanzada: " + (iluminacionAvanzada ? "Sí" : "No");
    }
}


===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/modelo/Usuario.java =====

package udistrital.avanzada.rolapet.modelo;

/**
 * Clase abstracta Usuario que extiende Persona.
 * Representa un usuario del sistema que tiene credenciales para autenticación,
 * incluyendo nombre de usuario y contraseña.
 * Esta clase debe ser extendida por tipos concretos de usuarios, como Cliente.
 * 
 * @author Sarita
 * @version 1.1, 25-09-2025
 */
import java.util.ArrayList;
import java.util.List;

/**
 * Class Usuario.
 */
/**
 * Class Usuario.
 */
public abstract class Usuario extends Persona {
    private List<Vehiculo> vehiculos = new ArrayList<>();

    /**
     * Devuelve la lista de vehículos registrados por el usuario.
     */
/**
 * getVehiculos method.
 * @return result
 */
/**
 * getVehiculos method.
 * @return result
 */
/**
 * getVehiculos method.
 * @return result
 */
    public List<Vehiculo> getVehiculos() {
        return vehiculos;
    }

    /**
     * Agrega un vehículo al usuario.
     */
/**
 * agregarVehiculo method.
 * @param vehiculo parameter
 * @return result
 */
/**
 * agregarVehiculo method.
 * @param vehiculo parameter
 */
/**
 * agregarVehiculo method.
 * @param vehiculo parameter
 */
    public void agregarVehiculo(Vehiculo vehiculo) {
        if (vehiculo != null && !vehiculos.contains(vehiculo)) {
            vehiculos.add(vehiculo);
        }
    }
    private String nombreUsuario;
    private String contrasena;
    private List<Usuario> amigos = new ArrayList<>();
    /**
     * Devuelve la lista de amigos del usuario.
     */
/**
 * getAmigos method.
 * @return result
 */
/**
 * getAmigos method.
 * @return result
 */
/**
 * getAmigos method.
 * @return result
 */
    public List<Usuario> getAmigos() {
        return amigos;
    }

    /**
     * Agrega un amigo al usuario si no está ya en la lista.
     */
/**
 * agregarAmigo method.
 * @param amigo parameter
 * @return result
 */
/**
 * agregarAmigo method.
 * @param amigo parameter
 * @return result
 */
/**
 * agregarAmigo method.
 * @param amigo parameter
 * @return result
 */
    public boolean agregarAmigo(Usuario amigo) {
        if (amigo != null && !amigos.contains(amigo) && !amigo.equals(this)) {
            amigos.add(amigo);
            return true;
        }
        return false;
    }

    /**
     * Constructor que crea un usuario con sus credenciales y datos personales.
     * 
     * @param nombreUsuario nombre de usuario para autenticación
     * @param contrasena contraseña del usuario
     * @param nombre nombre de la persona
     * @param apellido apellido de la persona
     * @param cedula número de cédula o identificación
     * @param correo correo electrónico
     * @param celular número de celular
     */
    public Usuario(String nombreUsuario, String contrasena, String nombre, String apellido, String cedula, String correo, String celular) {
        super(nombre, apellido, cedula, correo, celular);
        this.nombreUsuario = nombreUsuario;
        this.contrasena = contrasena;
    }

    /**
     * Devuelve el nombre de usuario.
     * @return nombre de usuario
     */
/**
 * getNombreUsuario method.
 * @return result
 */
/**
 * getNombreUsuario method.
 * @return result
 */
/**
 * getNombreUsuario method.
 * @return result
 */
    public String getNombreUsuario() {
        return nombreUsuario;
    }

    /**
     * Establece el nombre de usuario.
     * @param nombreUsuario nombre de usuario a asignar
     */
/**
 * setNombreUsuario method.
 * @param nombreUsuario parameter
 * @return result
 */
/**
 * setNombreUsuario method.
 * @param nombreUsuario parameter
 */
/**
 * setNombreUsuario method.
 * @param nombreUsuario parameter
 */
    public void setNombreUsuario(String nombreUsuario) {
        this.nombreUsuario = nombreUsuario;
    }

    /**
     * Devuelve la contraseña del usuario.
     * @return contraseña
     */
/**
 * getContrasena method.
 * @return result
 */
/**
 * getContrasena method.
 * @return result
 */
/**
 * getContrasena method.
 * @return result
 */
    public String getContrasena() {
        return contrasena;
    }

    /**
     * Establece la contraseña del usuario.
     * @param contrasena contraseña a asignar
     */
/**
 * setContrasena method.
 * @param contrasena parameter
 * @return result
 */
/**
 * setContrasena method.
 * @param contrasena parameter
 */
/**
 * setContrasena method.
 * @param contrasena parameter
 */
    public void setContrasena(String contrasena) {
        this.contrasena = contrasena;
    }
}


===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/modelo/Vehiculo.java =====

package udistrital.avanzada.rolapet.modelo;

/**
 * Clase que representa un vehículo genérico.
 * Contiene los atributos básicos comunes a todos los vehículos eléctricos de baja potencia.
 * Proporciona métodos para acceder y modificar estos atributos, así como una descripción del vehículo.
 * 
 * @author Sarita
 * @version 1.1, 25-09-2025
 */
/**
 * Class Vehiculo.
 */
/**
 * Class Vehiculo.
 */
public class Vehiculo {
    private String marca;
    private String modelo;
    private String placa;                // placa del vehículo
    private double autonomiaKm;          // autonomía en kilómetros
    private int potenciaNominalW;        // potencia nominal en vatios
    private double velocidadMaxKmh;      // velocidad máxima en km/h

    /**
     * Constructor que inicializa un vehículo con los atributos especificados.
     * 
     * @param marca marca del vehículo
     * @param modelo modelo del vehículo
     * @param autonomiaKm autonomía en kilómetros
     * @param potenciaNominalW potencia nominal en vatios
     * @param velocidadMaxKmh velocidad máxima en km/h
     */
    public Vehiculo(String marca, String modelo, String placa, double autonomiaKm, int potenciaNominalW, double velocidadMaxKmh) {
        this.marca = marca;
        this.modelo = modelo;
        this.placa = placa;
        this.autonomiaKm = autonomiaKm;
        this.potenciaNominalW = potenciaNominalW;
        this.velocidadMaxKmh = velocidadMaxKmh;
    }

    // Getters y Setters

/**
 * getMarca method.
 * @return result
 */
/**
 * getMarca method.
 * @return result
 */
/**
 * getMarca method.
 * @return result
 */
    public String getMarca() { return marca; }
/**
 * setMarca method.
 * @param marca parameter
 * @return result
 */
/**
 * setMarca method.
 * @param marca parameter
 */
/**
 * setMarca method.
 * @param marca parameter
 */
    public void setMarca(String marca) { this.marca = marca; }

/**
 * getModelo method.
 * @return result
 */
/**
 * getModelo method.
 * @return result
 */
/**
 * getModelo method.
 * @return result
 */
    public String getModelo() { return modelo; }
/**
 * setModelo method.
 * @param modelo parameter
 * @return result
 */
/**
 * setModelo method.
 * @param modelo parameter
 */
/**
 * setModelo method.
 * @param modelo parameter
 */
    public void setModelo(String modelo) { this.modelo = modelo; }

/**
 * getPlaca method.
 * @return result
 */
/**
 * getPlaca method.
 * @return result
 */
/**
 * getPlaca method.
 * @return result
 */
    public String getPlaca() { return placa; }
/**
 * setPlaca method.
 * @param placa parameter
 * @return result
 */
/**
 * setPlaca method.
 * @param placa parameter
 */
/**
 * setPlaca method.
 * @param placa parameter
 */
    public void setPlaca(String placa) { this.placa = placa; }

/**
 * getAutonomiaKm method.
 * @return result
 */
/**
 * getAutonomiaKm method.
 * @return result
 */
/**
 * getAutonomiaKm method.
 * @return result
 */
    public double getAutonomiaKm() { return autonomiaKm; }
/**
 * setAutonomiaKm method.
 * @param autonomiaKm parameter
 * @return result
 */
/**
 * setAutonomiaKm method.
 * @param autonomiaKm parameter
 */
/**
 * setAutonomiaKm method.
 * @param autonomiaKm parameter
 */
    public void setAutonomiaKm(double autonomiaKm) { this.autonomiaKm = autonomiaKm; }

/**
 * getPotenciaNominalW method.
 * @return result
 */
/**
 * getPotenciaNominalW method.
 * @return result
 */
/**
 * getPotenciaNominalW method.
 * @return result
 */
    public int getPotenciaNominalW() { return potenciaNominalW; }
/**
 * setPotenciaNominalW method.
 * @param potenciaNominalW parameter
 * @return result
 */
/**
 * setPotenciaNominalW method.
 * @param potenciaNominalW parameter
 */
/**
 * setPotenciaNominalW method.
 * @param potenciaNominalW parameter
 */
    public void setPotenciaNominalW(int potenciaNominalW) { this.potenciaNominalW = potenciaNominalW; }

/**
 * getVelocidadMaxKmh method.
 * @return result
 */
/**
 * getVelocidadMaxKmh method.
 * @return result
 */
/**
 * getVelocidadMaxKmh method.
 * @return result
 */
    public double getVelocidadMaxKmh() { return velocidadMaxKmh; }
/**
 * setVelocidadMaxKmh method.
 * @param velocidadMaxKmh parameter
 * @return result
 */
/**
 * setVelocidadMaxKmh method.
 * @param velocidadMaxKmh parameter
 */
/**
 * setVelocidadMaxKmh method.
 * @param velocidadMaxKmh parameter
 */
    public void setVelocidadMaxKmh(double velocidadMaxKmh) { this.velocidadMaxKmh = velocidadMaxKmh; }

    /**
     * Método que retorna una descripción completa del vehículo con sus características principales.
     * 
     * @return descripción formateada del vehículo
     */
/**
 * getDescripcion method.
 * @return result
 */
/**
 * getDescripcion method.
 * @return result
 */
/**
 * getDescripcion method.
 * @return result
 */
    public String getDescripcion() {
        return String.format("Marca: %s, Modelo: %s, Placa: %s, Autonomía: %.1f km, Potencia: %d W, Velocidad máxima: %.1f km/h",
                marca, modelo, placa, autonomiaKm, potenciaNominalW, velocidadMaxKmh);
    }
}


===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/vista/FormularioInicioSesion.java =====

package udistrital.avanzada.rolapet.vista;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionListener;

/**
 * Clase FormularioInicioSesion que representa la ventana de inicio de sesión.
 * Contiene campos para que el usuario ingrese su nombre de usuario y contraseña,
 * así como botones para ingresar o cancelar la operación.
 * La interfaz utiliza un diseño con colores y fuentes personalizados.
 * 
 * @author Sarita
 * @version 1.1, 25-09-2025
 */
/**
 * Class FormularioInicioSesion.
 */
/**
 * Class FormularioInicioSesion.
 */
public class FormularioInicioSesion extends JFrame {
    // Si el botón 'Atrás' no existe, devolver null para compatibilidad con el controlador
/**
 * getBtnAtras method.
 * @return result
 */
/**
 * getBtnAtras method.
 * @return result
 */
/**
 * getBtnAtras method.
 * @return result
 */
    public JButton getBtnAtras() {
        return null;
    }
    private JTextField txtUsuario;
    private JPasswordField txtContrasena;
    private JButton btnIngresar;
    protected JButton btnCancelar;

    /**
     * Constructor que inicializa la ventana con sus componentes,
     * configurando el diseño, colores y fuentes.
     */
    public FormularioInicioSesion() {
        super("Iniciar Sesión");
        Color fondo = Color.decode("#f5f5dc");
        Color encabezadoColor = Color.decode("#b81b2f");
        Color grisAtras = Color.GRAY;

        Font fuenteTitulo = new Font("Segoe UI", Font.BOLD, 24);
        Font fuenteCampos = new Font("Segoe UI", Font.PLAIN, 14);

        setLayout(new BorderLayout());

        JPanel headerPanel = new JPanel(new BorderLayout());
        headerPanel.setBackground(fondo);
        headerPanel.setBorder(BorderFactory.createEmptyBorder(15, 15, 15, 15));

        JLabel lblTitulo = new JLabel("Inicio de Sesión", SwingConstants.CENTER);
        lblTitulo.setFont(fuenteTitulo);
        lblTitulo.setForeground(encabezadoColor);

        headerPanel.add(lblTitulo, BorderLayout.CENTER);
        add(headerPanel, BorderLayout.NORTH);

        JPanel panelFormulario = new JPanel(new GridBagLayout());
        panelFormulario.setBackground(fondo);
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(8, 8, 8, 8);
        gbc.fill = GridBagConstraints.HORIZONTAL;

        txtUsuario = new JTextField(20);
        txtContrasena = new JPasswordField(20);

        JLabel lblUsuario = new JLabel("Usuario:");
        lblUsuario.setFont(fuenteCampos);
        JLabel lblContrasena = new JLabel("Contraseña:");
        lblContrasena.setFont(fuenteCampos);

        gbc.gridx = 0; gbc.gridy = 0;
        panelFormulario.add(lblUsuario, gbc);
        gbc.gridx = 1;
        panelFormulario.add(txtUsuario, gbc);

        gbc.gridx = 0; gbc.gridy = 1;
        panelFormulario.add(lblContrasena, gbc);
        gbc.gridx = 1;
        panelFormulario.add(txtContrasena, gbc);

        btnIngresar = new JButton("Ingresar");
        btnIngresar.setBackground(encabezadoColor);
        btnIngresar.setForeground(Color.WHITE);
        btnIngresar.setFocusPainted(false);
        btnIngresar.setFont(new Font("Segoe UI", Font.BOLD, 14));

        btnCancelar = new JButton("Cancelar");
        btnCancelar.setBackground(grisAtras);
        btnCancelar.setForeground(Color.WHITE);
        btnCancelar.setFocusPainted(false);
        btnCancelar.setFont(new Font("Segoe UI", Font.BOLD, 14));

        JPanel panelBotones = new JPanel();
        panelBotones.setBackground(fondo);
        btnIngresar.setBackground(encabezadoColor);
        btnIngresar.setForeground(Color.WHITE);
        btnIngresar.setOpaque(true);
        btnCancelar.setBackground(grisAtras);
        btnCancelar.setForeground(Color.WHITE);
        btnCancelar.setOpaque(true);
        panelBotones.add(btnIngresar);
        panelBotones.add(Box.createHorizontalStrut(10));
        panelBotones.add(btnCancelar);

        add(panelFormulario, BorderLayout.CENTER);
        add(panelBotones, BorderLayout.SOUTH);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        pack();
        setLocationRelativeTo(null);
    }

    /**
     * Devuelve el texto ingresado en el campo de usuario.
     * @return nombre de usuario ingresado
     */
/**
 * getUsuario method.
 * @return result
 */
/**
 * getUsuario method.
 * @return result
 */
/**
 * getUsuario method.
 * @return result
 */
    public String getUsuario() {
        return txtUsuario.getText().trim();
    }

    /**
     * Devuelve el texto ingresado en el campo de contraseña.
     * @return contraseña ingresada
     */
/**
 * getContrasena method.
 * @return result
 */
/**
 * getContrasena method.
 * @return result
 */
/**
 * getContrasena method.
 * @return result
 */
    public String getContrasena() {
        return new String(txtContrasena.getPassword());
    }

    /**
            btnCancelar.addActionListener(e -> {
                this.dispose();
            });
            btnCancelar.addActionListener(controlador);
     * @return botón ingresar
     */
/**
 * getBtnIngresar method.
 * @return result
 */
/**
 * getBtnIngresar method.
 * @return result
 */
/**
 * getBtnIngresar method.
 * @return result
 */
    public JButton getBtnIngresar() {
        return btnIngresar;
    }

    /**
     * Retorna el botón para cancelar, para agregar listeners de eventos.
     * @return botón cancelar
     */
/**
 * getBtnCancelar method.
 * @return result
 */
/**
 * getBtnCancelar method.
 * @return result
 */
/**
 * getBtnCancelar method.
 * @return result
 */
    public JButton getBtnCancelar() {
        return btnCancelar;
    }

    /**
     * Asigna el mismo ActionListener controlador a ambos botones de la ventana.
     * @param controlador ActionListener que manejará los eventos
     */
/**
 * setControlador method.
 * @param controlador parameter
 * @return result
 */
/**
 * setControlador method.
 * @param controlador parameter
 */
/**
 * setControlador method.
 * @param controlador parameter
 */
    public void setControlador(ActionListener controlador) {
        btnIngresar.addActionListener(controlador);
        btnCancelar.addActionListener(e -> {
            this.dispose();
        });
        btnCancelar.addActionListener(controlador);
    }
}


===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/vista/FormularioInicioSesionAdministrador.java =====

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package udistrital.avanzada.rolapet.vista;

/**
 * Class FormularioInicioSesionAdministrador.
 */
/**
 * Class FormularioInicioSesionAdministrador.
 */
public class FormularioInicioSesionAdministrador extends FormularioInicioSesion {

    public FormularioInicioSesionAdministrador() {
        super(); // reutiliza toda la interfaz de FormularioInicioSesion
        setTitle("Inicio de Sesión - Administrador");
        btnCancelar.setBackground(java.awt.Color.GRAY);
        btnCancelar.setForeground(java.awt.Color.WHITE);
        btnCancelar.setOpaque(true);
        btnCancelar.addActionListener(e -> {
            this.dispose();
        });
    }
}


===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/vista/FormularioInicioSesionProveedor.java =====

package udistrital.avanzada.rolapet.vista;

import java.awt.Color;

/**
 * Class FormularioInicioSesionProveedor.
 */
/**
 * Class FormularioInicioSesionProveedor.
 */
public class FormularioInicioSesionProveedor extends FormularioInicioSesion {

    private String tipoProveedor; // "ProveedorServicio" o "ProveedorInsumo"

    public FormularioInicioSesionProveedor(String tipoProveedor) {
        super(); // reutiliza todo el diseño de FormularioInicioSesion
        // Normalizar tipo para compatibilidad con inicio de sesión
        if (tipoProveedor.equalsIgnoreCase("ProveedorServicio")) {
            this.tipoProveedor = "Servicio";
        } else if (tipoProveedor.equalsIgnoreCase("ProveedorInsumo")) {
            this.tipoProveedor = "Insumo";
        } else {
            this.tipoProveedor = tipoProveedor;
        }
        setTitle("Inicio de Sesión - " + this.tipoProveedor);
        btnCancelar.setText("Atrás");
        btnCancelar.setBackground(Color.decode("#b81b2f"));
        btnCancelar.setForeground(Color.WHITE);
    }

/**
 * getTipoProveedor method.
 * @return result
 */
/**
 * getTipoProveedor method.
 * @return result
 */
/**
 * getTipoProveedor method.
 * @return result
 */
    public String getTipoProveedor() {
        return tipoProveedor;
    }
}




===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/vista/FormularioRegistro.java =====

package udistrital.avanzada.rolapet.vista;
import javax.swing.*;
import java.awt.*;

/**
 * Formulario para registrar un nuevo usuario.
 * Contiene campos para los datos personales y de acceso.
 * 
 * @author sarita
 * @version 1.0, 21-09-2025
/**
 * Class FormularioRegistro.
 */
/**
 * Class FormularioRegistro.
 */
 */public class FormularioRegistro extends JFrame {
    private JTextField txtNombre; 
    private JTextField txtApellido; 
    private JTextField txtCedula;
    private JTextField txtCorreo; 
    private JTextField txtCelular;
    private JTextField txtNombreUsuario;
    private JPasswordField txtContrasena;
    private JButton btnRegistrar;

    public FormularioRegistro() {
        super("Registro de Usuario");

        // Gama de colores para el formulario
        Color fondo = Color.decode("#f5f5dc"); // beige claro
        Color encabezadoColor = Color.decode("#b81b2f"); // rojo 
        Color botonColor = encabezadoColor; 

        Font fuenteCampos = new Font("Segoe UI", Font.PLAIN, 14);
        Font fuenteTitulo = new Font("Segoe UI", Font.BOLD, 24);

        setLayout(new BorderLayout());

        // Encabezado
        JPanel headerPanel = new JPanel(new BorderLayout());
        headerPanel.setBackground(fondo);
        headerPanel.setBorder(BorderFactory.createEmptyBorder(15, 15, 15, 15));

        // Logo
        ImageIcon logo = new ImageIcon(getClass().getResource("/imagenes/rolapet_logo.png"));
        Image img = logo.getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH);
        JLabel lblLogo = new JLabel(new ImageIcon(img));

        // Nombre del encabezado
        JLabel lblTitulo = new JLabel("Rolapet - Registro de Usuario", SwingConstants.LEFT);
        lblTitulo.setFont(fuenteTitulo);
        lblTitulo.setForeground(encabezadoColor);

        headerPanel.add(lblLogo, BorderLayout.WEST);
        headerPanel.add(lblTitulo, BorderLayout.CENTER);
        add(headerPanel, BorderLayout.NORTH);

        //Panel central con formulario
        JPanel panelFormulario = new JPanel(new GridBagLayout());
        panelFormulario.setBackground(fondo);
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(8, 8, 8, 8);
        gbc.fill = GridBagConstraints.HORIZONTAL;

        // Campos de texto
        txtNombre = new JTextField(20);
        txtApellido = new JTextField(20);
        txtCedula = new JTextField(20);
        txtCorreo = new JTextField(20);
        txtCelular = new JTextField(20);
        txtNombreUsuario = new JTextField(20);
        txtContrasena = new JPasswordField(20);

        String[] etiquetas = {"Nombre:", "Apellido:", "Cédula:", "Correo:", "Celular:", "Nombre de usuario:", "Contraseña:"};
        JComponent[] campos = {txtNombre, txtApellido, txtCedula, txtCorreo, txtCelular, txtNombreUsuario, txtContrasena};

        gbc.gridx = 0;
        gbc.gridy = 0;
        for (int i = 0; i < etiquetas.length; i++) {
            JLabel lbl = new JLabel(etiquetas[i]);
            lbl.setFont(fuenteCampos);
            gbc.gridx = 0;
            gbc.anchor = GridBagConstraints.WEST;
            panelFormulario.add(lbl, gbc);
            gbc.gridx = 1;
            panelFormulario.add(campos[i], gbc);
            gbc.gridy++;
        }
        add(panelFormulario, BorderLayout.CENTER);

        // Botón Registrar 
        btnRegistrar = new JButton("Registrar");
        btnRegistrar.setBackground(botonColor);
        btnRegistrar.setForeground(Color.WHITE);
        btnRegistrar.setFocusPainted(false);
        btnRegistrar.setFont(new Font("Segoe UI", Font.BOLD, 14));
        btnRegistrar.setBorder(BorderFactory.createEmptyBorder(10, 20, 10, 20));

        JPanel panelBoton = new JPanel();
        panelBoton.setBackground(fondo);
        panelBoton.add(btnRegistrar);
        add(panelBoton, BorderLayout.SOUTH);

        // Configuración ventana
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        pack();
        setLocationRelativeTo(null);
    }

    // Getters para acceder desde el controlador
/**
 * getNombre method.
 * @return result
 */
/**
 * getNombre method.
 * @return result
 */
/**
 * getNombre method.
 * @return result
 */
    public String getNombre() { return txtNombre.getText().trim(); }
/**
 * getApellido method.
 * @return result
 */
/**
 * getApellido method.
 * @return result
 */
/**
 * getApellido method.
 * @return result
 */
    public String getApellido() { return txtApellido.getText().trim(); }
/**
 * getCedula method.
 * @return result
 */
/**
 * getCedula method.
 * @return result
 */
/**
 * getCedula method.
 * @return result
 */
    public String getCedula() { return txtCedula.getText().trim(); }
/**
 * getCorreo method.
 * @return result
 */
/**
 * getCorreo method.
 * @return result
 */
/**
 * getCorreo method.
 * @return result
 */
    public String getCorreo() { return txtCorreo.getText().trim(); }
/**
 * getCelular method.
 * @return result
 */
/**
 * getCelular method.
 * @return result
 */
/**
 * getCelular method.
 * @return result
 */
    public String getCelular() { return txtCelular.getText().trim(); }
/**
 * getNombreUsuario method.
 * @return result
 */
/**
 * getNombreUsuario method.
 * @return result
 */
/**
 * getNombreUsuario method.
 * @return result
 */
    public String getNombreUsuario() { return txtNombreUsuario.getText().trim(); }
/**
 * getContrasena method.
 * @return result
 */
/**
 * getContrasena method.
 * @return result
 */
/**
 * getContrasena method.
 * @return result
 */
    public String getContrasena() { return new String(txtContrasena.getPassword()); }
/**
 * getBtnRegistrar method.
 * @return result
 */
/**
 * getBtnRegistrar method.
 * @return result
 */
/**
 * getBtnRegistrar method.
 * @return result
 */
    public JButton getBtnRegistrar() { return btnRegistrar; }

    /**
     * Limpia todos los campos del formulario.
     */
/**
 * limpiarCampos method.
 * @return result
 */
/**
 * limpiarCampos method.
 */
/**
 * limpiarCampos method.
 */
    public void limpiarCampos() {
        txtNombre.setText("");
        txtApellido.setText("");
        txtCedula.setText("");
        txtCorreo.setText("");
        txtCelular.setText("");
        txtNombreUsuario.setText("");
        txtContrasena.setText("");
    }
}


===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/vista/FormularioRegistroCliente.java =====

package udistrital.avanzada.rolapet.vista;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionListener;

/**
 * Clase FormularioRegistroCliente que representa la ventana para registrar un nuevo cliente.
 * Contiene campos para ingresar datos personales, credenciales y botones para registrar o regresar.
 * Incluye una lista gráfica con los requisitos para la contraseña.
 * 
 * @author Sarita
 * @version 1.2, 25-09-2025
 */
/**
 * Class FormularioRegistroCliente.
 */
/**
 * Class FormularioRegistroCliente.
 */
public class FormularioRegistroCliente extends JFrame {
    private JTextField txtNombre;
    private JTextField txtApellido;
    private JTextField txtCedula;
    private JTextField txtCorreo;
    private JTextField txtCelular;
    private JTextField txtNombreUsuario;
    private JPasswordField txtContrasena;
    private JButton btnRegistrar;
    private JButton btnAtras;

    /**
     * Constructor que inicializa la ventana con sus componentes y diseño.
     * Configura etiquetas, campos de texto, botón registrar y botón atrás,
     * así como los requisitos visibles para la contraseña.
     */
    public FormularioRegistroCliente() {
        super("Registro de Cliente");

        Color fondo = Color.decode("#f5f5dc");
        Color encabezadoColor = Color.decode("#b81b2f");

        Font fuenteCampos = new Font("Segoe UI", Font.PLAIN, 14);
        Font fuenteTitulo = new Font("Segoe UI", Font.BOLD, 24);

        setLayout(new BorderLayout());

        JPanel headerPanel = new JPanel(new BorderLayout());
        headerPanel.setBackground(fondo);
        headerPanel.setBorder(BorderFactory.createEmptyBorder(15, 15, 15, 15));

        ImageIcon logo = new ImageIcon(getClass().getResource("/imagenes/rolapet_logo.png"));
        Image img = logo.getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH);
        JLabel lblLogo = new JLabel(new ImageIcon(img));

        JLabel lblTitulo = new JLabel("Rolapet - Registro de Cliente", SwingConstants.LEFT);
        lblTitulo.setFont(fuenteTitulo);
        lblTitulo.setForeground(encabezadoColor);

        headerPanel.add(lblLogo, BorderLayout.WEST);
        headerPanel.add(lblTitulo, BorderLayout.CENTER);
        add(headerPanel, BorderLayout.NORTH);

        JPanel panelFormulario = new JPanel(new GridBagLayout());
        panelFormulario.setBackground(fondo);
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(8, 8, 8, 8);
        gbc.fill = GridBagConstraints.HORIZONTAL;

        txtNombre = new JTextField(20);
        txtApellido = new JTextField(20);
        txtCedula = new JTextField(20);
        txtCorreo = new JTextField(20);
        txtCelular = new JTextField(20);
        txtNombreUsuario = new JTextField(20);
        txtContrasena = new JPasswordField(20);

        String[] etiquetas = {"Nombre:", "Apellido:", "Cédula:", "Correo:", "Celular:", "Nombre de usuario:", "Contraseña:"};
        JComponent[] campos = {txtNombre, txtApellido, txtCedula, txtCorreo, txtCelular, txtNombreUsuario, txtContrasena};

        gbc.gridx = 0;
        gbc.gridy = 0;
        for (int i = 0; i < etiquetas.length; i++) {
            JLabel lbl = new JLabel(etiquetas[i]);
            lbl.setFont(fuenteCampos);
            gbc.gridx = 0;
            gbc.anchor = GridBagConstraints.WEST;
            panelFormulario.add(lbl, gbc);
            gbc.gridx = 1;
            panelFormulario.add(campos[i], gbc);
            gbc.gridy++;
        }

        // Agregar JLabel con los requisitos de contraseña
        String textoRequisitos = "<html><ul>"
                + "<li>Mínimo 8 caracteres</li>"
                + "<li>Al menos una letra mayúscula</li>"
                + "<li>Al menos un número</li>"
                + "<li>Al menos un carácter especial (@, $, !, %, *, ?, &)</li>"
                + "</ul></html>";

        JLabel lblRequisitos = new JLabel(textoRequisitos);
        lblRequisitos.setFont(new Font("Segoe UI", Font.PLAIN, 12));
        lblRequisitos.setForeground(Color.DARK_GRAY);

        gbc.gridx = 0;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.gridy++;
        gbc.insets = new Insets(5, 8, 10, 8);
        panelFormulario.add(lblRequisitos, gbc);

        add(panelFormulario, BorderLayout.CENTER);

        btnRegistrar = new JButton("Registrar");
        btnRegistrar.setBackground(encabezadoColor);
        btnRegistrar.setForeground(Color.WHITE);
        btnRegistrar.setFocusPainted(false);
        btnRegistrar.setFont(new Font("Segoe UI", Font.BOLD, 14));

        btnAtras = new JButton("Atrás");
        btnAtras.setBackground(Color.GRAY);
        btnAtras.setForeground(Color.WHITE);
        btnAtras.setFocusPainted(false);
        btnAtras.setFont(new Font("Segoe UI", Font.BOLD, 14));

        JPanel panelBotones = new JPanel();
        panelBotones.setBackground(fondo);
        panelBotones.add(btnRegistrar);
        panelBotones.add(btnAtras);

        add(panelBotones, BorderLayout.SOUTH);

        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        pack();
        setLocationRelativeTo(null);
    }

/**
 * getNombre method.
 * @return result
 */
/**
 * getNombre method.
 * @return result
 */
/**
 * getNombre method.
 * @return result
 */
    public String getNombre() { return txtNombre.getText().trim(); }
/**
 * getApellido method.
 * @return result
 */
/**
 * getApellido method.
 * @return result
 */
/**
 * getApellido method.
 * @return result
 */
    public String getApellido() { return txtApellido.getText().trim(); }
/**
 * getCedula method.
 * @return result
 */
/**
 * getCedula method.
 * @return result
 */
/**
 * getCedula method.
 * @return result
 */
    public String getCedula() { return txtCedula.getText().trim(); }
/**
 * getCorreo method.
 * @return result
 */
/**
 * getCorreo method.
 * @return result
 */
/**
 * getCorreo method.
 * @return result
 */
    public String getCorreo() { return txtCorreo.getText().trim(); }
/**
 * getCelular method.
 * @return result
 */
/**
 * getCelular method.
 * @return result
 */
/**
 * getCelular method.
 * @return result
 */
    public String getCelular() { return txtCelular.getText().trim(); }
/**
 * getNombreUsuario method.
 * @return result
 */
/**
 * getNombreUsuario method.
 * @return result
 */
/**
 * getNombreUsuario method.
 * @return result
 */
    public String getNombreUsuario() { return txtNombreUsuario.getText().trim(); }
/**
 * getContrasena method.
 * @return result
 */
/**
 * getContrasena method.
 * @return result
 */
/**
 * getContrasena method.
 * @return result
 */
    public String getContrasena() { return new String(txtContrasena.getPassword()); }

/**
 * getBtnRegistrar method.
 * @return result
 */
/**
 * getBtnRegistrar method.
 * @return result
 */
/**
 * getBtnRegistrar method.
 * @return result
 */
    public JButton getBtnRegistrar() { return btnRegistrar; }
/**
 * getBtnAtras method.
 * @return result
 */
/**
 * getBtnAtras method.
 * @return result
 */
/**
 * getBtnAtras method.
 * @return result
 */
    public JButton getBtnAtras() { return btnAtras; }

    /**
     * Limpia todos los campos del formulario dejando los textos vacíos.
     */
/**
 * limpiarCampos method.
 * @return result
 */
/**
 * limpiarCampos method.
 */
/**
 * limpiarCampos method.
 */
    public void limpiarCampos() {
        txtNombre.setText("");
        txtApellido.setText("");
        txtCedula.setText("");
        txtCorreo.setText("");
        txtCelular.setText("");
        txtNombreUsuario.setText("");
        txtContrasena.setText("");
    }

    /**
     * Asigna el mismo ActionListener controlador a los botones Registrar y Atrás.
     * 
     * @param controlador ActionListener que gestionará los eventos de los botones
     */
/**
 * setControlador method.
 * @param controlador parameter
 * @return result
 */
/**
 * setControlador method.
 * @param controlador parameter
 */
/**
 * setControlador method.
 * @param controlador parameter
 */
    public void setControlador(ActionListener controlador) {
        btnRegistrar.addActionListener(controlador);
        btnAtras.addActionListener(controlador);
    }
}


===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/vista/FormularioRegistroProveedor.java =====

package udistrital.avanzada.rolapet.vista;

import javax.swing.*;

/**
 * Class FormularioRegistroProveedor.
 */
/**
 * Class FormularioRegistroProveedor.
 */
public class FormularioRegistroProveedor extends JFrame {

	protected JTextField txtNombre;
	protected JTextField txtApellido;
	protected JTextField txtCedula;
	protected JTextField txtCorreo;
	protected JTextField txtCelular;
	protected JPasswordField txtContrasena;
	protected JButton btnRegistrar;
	protected JButton btnCancelar;

	public FormularioRegistroProveedor() {
		// Inicialización de componentes
		txtNombre = new JTextField(20);
		txtApellido = new JTextField(20);
		txtCedula = new JTextField(20);
		txtCorreo = new JTextField(20);
		txtCelular = new JTextField(20);
		txtContrasena = new JPasswordField(20);

		btnRegistrar = new JButton("Registrar");
		btnCancelar = new JButton("Cancelar");

		// Diseño simple con BoxLayout vertical
		setLayout(new BoxLayout(getContentPane(), BoxLayout.Y_AXIS));
		add(new JLabel("Nombre"));
		add(txtNombre);
		add(new JLabel("Apellido"));
		add(txtApellido);
		add(new JLabel("Cédula"));
		add(txtCedula);
		add(new JLabel("Correo (será su usuario)"));
		add(txtCorreo);
		add(new JLabel("Celular"));
		add(txtCelular);
		add(new JLabel("Contraseña"));
		add(txtContrasena);
		add(btnRegistrar);
		add(btnCancelar);

		pack();
		setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
	}

/**
 * getNombre method.
 * @return result
 */
/**
 * getNombre method.
 * @return result
 */
/**
 * getNombre method.
 * @return result
 */
	public String getNombre() {
		return txtNombre.getText().trim();
	}

/**
 * getApellido method.
 * @return result
 */
/**
 * getApellido method.
 * @return result
 */
/**
 * getApellido method.
 * @return result
 */
	public String getApellido() {
		return txtApellido.getText().trim();
	}

/**
 * getCedula method.
 * @return result
 */
/**
 * getCedula method.
 * @return result
 */
/**
 * getCedula method.
 * @return result
 */
	public String getCedula() {
		return txtCedula.getText().trim();
	}

/**
 * getCorreo method.
 * @return result
 */
/**
 * getCorreo method.
 * @return result
 */
/**
 * getCorreo method.
 * @return result
 */
	public String getCorreo() {
		return txtCorreo.getText().trim();
	}

/**
 * getCelular method.
 * @return result
 */
/**
 * getCelular method.
 * @return result
 */
/**
 * getCelular method.
 * @return result
 */
	public String getCelular() {
		return txtCelular.getText().trim();
	}

/**
 * getContrasena method.
 * @return result
 */
/**
 * getContrasena method.
 * @return result
 */
/**
 * getContrasena method.
 * @return result
 */
	public String getContrasena() {
		return new String(txtContrasena.getPassword());
	}

/**
 * getBtnRegistrar method.
 * @return result
 */
/**
 * getBtnRegistrar method.
 * @return result
 */
/**
 * getBtnRegistrar method.
 * @return result
 */
	public JButton getBtnRegistrar() {
		return btnRegistrar;
	}

/**
 * getBtnCancelar method.
 * @return result
 */
/**
 * getBtnCancelar method.
 * @return result
 */
/**
 * getBtnCancelar method.
 * @return result
 */
	public JButton getBtnCancelar() {
		return btnCancelar;
	}

/**
 * setControlador method.
 * @param controlador parameter
 * @return result
 */
/**
 * setControlador method.
 * @param controlador parameter
 */
/**
 * setControlador method.
 * @param controlador parameter
 */
	public void setControlador(java.awt.event.ActionListener controlador) {
		btnRegistrar.addActionListener(controlador);
		btnCancelar.addActionListener(controlador);
	}
}


===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/vista/FormularioRegistroProveedorInsumos.java =====

package udistrital.avanzada.rolapet.vista;

import javax.swing.*;
import java.awt.*;

/**
 * Class FormularioRegistroProveedorInsumos.
 */
/**
 * Class FormularioRegistroProveedorInsumos.
 */
public class FormularioRegistroProveedorInsumos extends FormularioRegistroProveedor {
    private JFrame ventanaAnterior;

    public FormularioRegistroProveedorInsumos(JFrame ventanaAnterior) {
        super();
        setTitle("Registro - Proveedor de Insumos");

        Color fondo = Color.decode("#f5f5dc");
        Color encabezadoColor = Color.decode("#b81b2f");

        setLayout(new BorderLayout());

        JPanel headerPanel = new JPanel(new BorderLayout());
        headerPanel.setBackground(fondo);
        headerPanel.setBorder(BorderFactory.createEmptyBorder(15, 15, 15, 15));

        ImageIcon logo = new ImageIcon(getClass().getResource("/imagenes/rolapet_logo.png"));
        Image img = logo.getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH);
        JLabel lblLogo = new JLabel(new ImageIcon(img));

        JLabel lblTitulo = new JLabel("Rolapet - Registro Proveedor Insumos", SwingConstants.LEFT);
        lblTitulo.setFont(new Font("Segoe UI", Font.BOLD, 20));
        lblTitulo.setForeground(encabezadoColor);

        headerPanel.add(lblLogo, BorderLayout.WEST);
        headerPanel.add(lblTitulo, BorderLayout.CENTER);
        add(headerPanel, BorderLayout.NORTH);

        JPanel panelCentral = new JPanel();
        panelCentral.setLayout(new BoxLayout(panelCentral, BoxLayout.Y_AXIS));
        panelCentral.setBackground(fondo);

        // Agregar los campos del formulario
        panelCentral.add(new JLabel("Nombre"));
        panelCentral.add(txtNombre);
        panelCentral.add(new JLabel("Apellido"));
        panelCentral.add(txtApellido);
        panelCentral.add(new JLabel("Cédula"));
        panelCentral.add(txtCedula);
        panelCentral.add(new JLabel("Correo (será su usuario)"));
        panelCentral.add(txtCorreo);
        panelCentral.add(new JLabel("Celular"));
        panelCentral.add(txtCelular);
        panelCentral.add(new JLabel("Contraseña"));
        panelCentral.add(txtContrasena);

        // Botones
        JPanel panelBotones = new JPanel();
        panelBotones.setBackground(fondo);
        btnRegistrar.setBackground(encabezadoColor);
        btnRegistrar.setForeground(Color.WHITE);
        btnRegistrar.setOpaque(true);
        btnCancelar.setForeground(Color.WHITE);
        btnCancelar.setOpaque(true);
        btnCancelar.addActionListener(e -> {
            this.dispose();
        });
        panelBotones.add(btnRegistrar);
        panelBotones.add(btnCancelar);

        panelCentral.add(Box.createVerticalStrut(10));
        panelCentral.add(panelBotones);

        add(panelCentral, BorderLayout.CENTER);
        pack();
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }
}

===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/vista/FormularioRegistroProveedorServicios.java =====

package udistrital.avanzada.rolapet.vista;

import javax.swing.*;
import java.awt.*;

/**
 * Class FormularioRegistroProveedorServicios.
 */
/**
 * Class FormularioRegistroProveedorServicios.
 */
public class FormularioRegistroProveedorServicios extends FormularioRegistroProveedor {
    private JFrame ventanaAnterior;

    public FormularioRegistroProveedorServicios(JFrame ventanaAnterior) {
        super();
        this.ventanaAnterior = ventanaAnterior;
        setTitle("Registro - Proveedor de Servicios");

        Color fondo = Color.decode("#f5f5dc");
        Color encabezadoColor = Color.decode("#b81b2f");

        setLayout(new BorderLayout());

        JPanel headerPanel = new JPanel(new BorderLayout());
        headerPanel.setBackground(fondo);
        headerPanel.setBorder(BorderFactory.createEmptyBorder(15, 15, 15, 15));

        ImageIcon logo = new ImageIcon(getClass().getResource("/imagenes/rolapet_logo.png"));
        Image img = logo.getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH);
        JLabel lblLogo = new JLabel(new ImageIcon(img));

        JLabel lblTitulo = new JLabel("Rolapet - Registro Proveedor Servicios", SwingConstants.LEFT);
        lblTitulo.setFont(new Font("Segoe UI", Font.BOLD, 20));
        lblTitulo.setForeground(encabezadoColor);

        headerPanel.add(lblLogo, BorderLayout.WEST);
        headerPanel.add(lblTitulo, BorderLayout.CENTER);
        add(headerPanel, BorderLayout.NORTH);

        JPanel panelCentral = new JPanel();
        panelCentral.setLayout(new BoxLayout(panelCentral, BoxLayout.Y_AXIS));
        panelCentral.setBackground(fondo);

        // Agregar los campos del formulario
        panelCentral.add(new JLabel("Nombre"));
        panelCentral.add(txtNombre);
        panelCentral.add(new JLabel("Apellido"));
        panelCentral.add(txtApellido);
        panelCentral.add(new JLabel("Cédula"));
        panelCentral.add(txtCedula);
        panelCentral.add(new JLabel("Correo (será su usuario)"));
        panelCentral.add(txtCorreo);
        panelCentral.add(new JLabel("Celular"));
        panelCentral.add(txtCelular);
        panelCentral.add(new JLabel("Contraseña"));
        panelCentral.add(txtContrasena);

        // Botones
        JPanel panelBotones = new JPanel();
        panelBotones.setBackground(fondo);
        btnRegistrar.setBackground(encabezadoColor);
        btnRegistrar.setForeground(Color.WHITE);
        btnRegistrar.setOpaque(true);
        btnCancelar.setBackground(Color.GRAY);
        btnCancelar.setForeground(Color.WHITE);
        btnCancelar.setOpaque(true);
        btnCancelar.addActionListener(e -> {
            this.dispose();
        });
        panelBotones.add(btnRegistrar);
        panelBotones.add(btnCancelar);

        panelCentral.add(Box.createVerticalStrut(10));
        panelCentral.add(panelBotones);

        add(panelCentral, BorderLayout.CENTER);
        pack();
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }
}

===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/vista/VentanaAdministrador.java =====

package udistrital.avanzada.rolapet.vista;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionListener;

/**
 * Class VentanaAdministrador.
 */
/**
 * Class VentanaAdministrador.
 */
public class VentanaAdministrador extends JFrame {
    private JButton btnRegistrarProveedor;
    private JButton btnCrearPublicacion;
    private JButton btnCerrarSesion;

    public VentanaAdministrador() {
        Color fondo = Color.decode("#f5f5dc");
        Color encabezadoColor = Color.decode("#b81b2f");
        Font fuenteTitulo = new Font("Segoe UI", Font.BOLD, 24);

        setTitle("Panel de Administrador");
        setSize(400, 300);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setLayout(new BorderLayout());

        // Header con logo y título
        JPanel headerPanel = new JPanel(new BorderLayout());
        headerPanel.setBackground(fondo);
        headerPanel.setBorder(BorderFactory.createEmptyBorder(15, 15, 15, 15));
        ImageIcon logo = new ImageIcon(getClass().getResource("/imagenes/rolapet_logo.png"));
        Image img = logo.getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH);
        JLabel lblLogo = new JLabel(new ImageIcon(img));
        JLabel lblTitulo = new JLabel("Rolapet - Administrador", SwingConstants.LEFT);
        lblTitulo.setFont(fuenteTitulo);
        lblTitulo.setForeground(encabezadoColor);
        headerPanel.add(lblLogo, BorderLayout.WEST);
        headerPanel.add(lblTitulo, BorderLayout.CENTER);
        add(headerPanel, BorderLayout.NORTH);

        // Botones
        btnRegistrarProveedor = new JButton("Registrar proveedor");
        btnRegistrarProveedor.setBackground(encabezadoColor);
        btnRegistrarProveedor.setForeground(Color.WHITE);
        btnRegistrarProveedor.setOpaque(true);

        btnCrearPublicacion = new JButton("Crear publicación");
        btnCrearPublicacion.setBackground(encabezadoColor);
        btnCrearPublicacion.setForeground(Color.WHITE);
        btnCrearPublicacion.setOpaque(true);

        btnCerrarSesion = new JButton("Cerrar sesión");
        btnCerrarSesion.setBackground(Color.GRAY);
        btnCerrarSesion.setForeground(Color.WHITE);
        btnCerrarSesion.setOpaque(true);

        JPanel panelBotones = new JPanel();
        panelBotones.setLayout(new BoxLayout(panelBotones, BoxLayout.Y_AXIS));
        panelBotones.setBackground(fondo);

        btnRegistrarProveedor.setAlignmentX(Component.CENTER_ALIGNMENT);
        btnCrearPublicacion.setAlignmentX(Component.CENTER_ALIGNMENT);
        btnCerrarSesion.setAlignmentX(Component.CENTER_ALIGNMENT);

        panelBotones.add(Box.createVerticalGlue());
        panelBotones.add(btnRegistrarProveedor);
        panelBotones.add(Box.createRigidArea(new Dimension(0, 15)));
        panelBotones.add(btnCrearPublicacion);
        panelBotones.add(Box.createRigidArea(new Dimension(0, 15)));
        panelBotones.add(btnCerrarSesion);
        panelBotones.add(Box.createVerticalGlue());

        add(panelBotones, BorderLayout.CENTER);
        setLocationRelativeTo(null);
    }

/**
 * setRegistrarProveedorListener method.
 * @param listener parameter
 * @return result
 */
/**
 * setRegistrarProveedorListener method.
 * @param listener parameter
 */
/**
 * setRegistrarProveedorListener method.
 * @param listener parameter
 */
    public void setRegistrarProveedorListener(ActionListener listener) {
        btnRegistrarProveedor.addActionListener(listener);
    }
/**
 * setCrearPublicacionListener method.
 * @param listener parameter
 * @return result
 */
/**
 * setCrearPublicacionListener method.
 * @param listener parameter
 */
/**
 * setCrearPublicacionListener method.
 * @param listener parameter
 */
    public void setCrearPublicacionListener(ActionListener listener) {
        btnCrearPublicacion.addActionListener(listener);
    }
/**
 * setCerrarSesionListener method.
 * @param listener parameter
 * @return result
 */
/**
 * setCerrarSesionListener method.
 * @param listener parameter
 */
/**
 * setCerrarSesionListener method.
 * @param listener parameter
 */
    public void setCerrarSesionListener(ActionListener listener) {
        btnCerrarSesion.addActionListener(listener);
    }
}


===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/vista/VentanaCrearPublicacion.java =====

package udistrital.avanzada.rolapet.vista;

import javax.swing.*;
import java.awt.*;
import java.time.LocalDate;
import udistrital.avanzada.rolapet.modelo.Publicacion;
import udistrital.avanzada.rolapet.modelo.Usuario;
import udistrital.avanzada.rolapet.modelo.RepositorioPublicaciones;

/**
 * Ventana para que administradores y proveedores creen eventos o promociones.
 * @author Sarita
 * @version 1.0, 27-09-2025
 */
/**
 * Class VentanaCrearPublicacion.
 */
/**
 * Class VentanaCrearPublicacion.
 */
public class VentanaCrearPublicacion extends JFrame {
    private JTextField campoTitulo, campoId;
    private JTextArea campoDescripcion;
    private JComboBox<String> comboTipo;
    private JButton btnPublicar, btnCancelar;

    // Constructor para proveedores y administradores
    public VentanaCrearPublicacion(Usuario autor, RepositorioPublicaciones repoPublicaciones) {
        setTitle("Crear Publicación");
        setSize(400, 350);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setLayout(new BorderLayout());

        Color fondo = Color.decode("#f5f5dc");
        Color encabezadoColor = Color.decode("#b81b2f");
        Font fuenteLabels = new Font("Segoe UI", Font.PLAIN, 14);
        Font fuenteBotones = new Font("Segoe UI", Font.BOLD, 14);
        Font fuenteTitulo = new Font("Segoe UI", Font.BOLD, 20);

        JPanel panel = new JPanel(new GridBagLayout());
        panel.setBackground(fondo);
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(8,8,8,8);
        gbc.fill = GridBagConstraints.HORIZONTAL;

        JLabel lblTitulo = new JLabel("Crear Evento/Promoción");
        lblTitulo.setFont(fuenteTitulo);
        lblTitulo.setForeground(encabezadoColor);
        gbc.gridx = 0; gbc.gridy = 0; gbc.gridwidth = 2;
        panel.add(lblTitulo, gbc);

        gbc.gridwidth = 1;
        gbc.gridy++;
        panel.add(new JLabel("ID:"), gbc);
        gbc.gridx = 1;
        campoId = new JTextField(15);
        panel.add(campoId, gbc);

        gbc.gridx = 0; gbc.gridy++;
        panel.add(new JLabel("Título:"), gbc);
        gbc.gridx = 1;
        campoTitulo = new JTextField(15);
        panel.add(campoTitulo, gbc);

        gbc.gridx = 0; gbc.gridy++;
        panel.add(new JLabel("Descripción:"), gbc);
        gbc.gridx = 1;
        campoDescripcion = new JTextArea(4, 15);
        campoDescripcion.setLineWrap(true);
        campoDescripcion.setWrapStyleWord(true);
        JScrollPane scrollDesc = new JScrollPane(campoDescripcion);
        panel.add(scrollDesc, gbc);

        gbc.gridx = 0; gbc.gridy++;
        panel.add(new JLabel("Tipo:"), gbc);
        gbc.gridx = 1;
        comboTipo = new JComboBox<>(new String[]{"Evento", "Promoción"});
        panel.add(comboTipo, gbc);

        gbc.gridx = 0; gbc.gridy++;
        btnPublicar = new JButton("Publicar");
        btnPublicar.setBackground(encabezadoColor);
        btnPublicar.setForeground(Color.WHITE);
        btnPublicar.setFont(fuenteBotones);
        panel.add(btnPublicar, gbc);
        gbc.gridx = 1;
        btnCancelar = new JButton("Cancelar");
        btnCancelar.setBackground(Color.GRAY);
        btnCancelar.setForeground(Color.WHITE);
        btnCancelar.setFont(fuenteBotones);
        panel.add(btnCancelar, gbc);

        add(panel, BorderLayout.CENTER);

        btnPublicar.addActionListener(e -> {
            String id = campoId.getText().trim();
            String titulo = campoTitulo.getText().trim();
            String descripcion = campoDescripcion.getText().trim();
            String tipo = (String) comboTipo.getSelectedItem();
            if (id.isEmpty() || titulo.isEmpty() || descripcion.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Todos los campos son obligatorios.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            Publicacion pub = new Publicacion(id, titulo, descripcion, tipo, autor, java.time.LocalDate.now());
            repoPublicaciones.agregarPublicacion(pub);
            if (autor instanceof udistrital.avanzada.rolapet.modelo.Proveedor) {
                ((udistrital.avanzada.rolapet.modelo.Proveedor)autor).agregarPublicacion(pub);
            }
            JOptionPane.showMessageDialog(this, "¡Publicación creada exitosamente!", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            dispose();
        });
        btnCancelar.addActionListener(e -> dispose());
    }

    // Constructor alternativo para administrador (sin usuario, solo repositorio)
    public VentanaCrearPublicacion(RepositorioPublicaciones repoPublicaciones) {
        this(null, repoPublicaciones) ;
    }

    // (eliminado: inicialización duplicada fuera de los constructores)
}


===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/vista/VentanaGaleriaProveedores.java =====

package udistrital.avanzada.rolapet.vista;

import udistrital.avanzada.rolapet.modelo.Proveedor;
import udistrital.avanzada.rolapet.modelo.RepositorioUsuarios;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.util.List;
import java.util.stream.Collectors;

/**
 * Class VentanaGaleriaProveedores.
 */
/**
 * Class VentanaGaleriaProveedores.
 */
public class VentanaGaleriaProveedores extends JFrame {
    // Método para cargar proveedores desde una lista de Proveedor
/**
 * cargarProveedoresDirecto method.
 * @param proveedores parameter
 * @param tipo parameter
 * @param busqueda parameter
 * @return result
 */
/**
 * cargarProveedoresDirecto method.
 * @param proveedores parameter
 * @param tipo parameter
 * @param busqueda parameter
 */
/**
 * cargarProveedoresDirecto method.
 * @param proveedores parameter
 * @param tipo parameter
 * @param busqueda parameter
 */
    private void cargarProveedoresDirecto(List<Proveedor> proveedores, String tipo, String busqueda) {
        modeloTabla.setRowCount(0);
        List<Proveedor> filtrados = proveedores.stream()
                .filter(p -> tipo.equals("Todos") || p.getTipoProveedor().equalsIgnoreCase(tipo))
                .filter(p -> busqueda.isEmpty() || p.getNombre().toLowerCase().contains(busqueda) || p.getNombreUsuario().toLowerCase().contains(busqueda))
                .collect(java.util.stream.Collectors.toList());
        for (Proveedor p : filtrados) {
            String productos = p.getItems().isEmpty() ? "-" : p.getItems().stream().map(Object::toString).collect(java.util.stream.Collectors.joining(", "));
            modeloTabla.addRow(new Object[]{p.getNombreUsuario(), p.getNombre(), p.getTipoProveedor(), productos});
        }
    }
    // Constructor alternativo que recibe directamente la lista de proveedores
    public VentanaGaleriaProveedores(List<Proveedor> proveedores) {
        setTitle("Galería de Proveedores");
        setSize(700, 400);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setLayout(new BorderLayout());

        Color fondo = Color.decode("#f5f5dc");
        Color encabezadoColor = Color.decode("#b81b2f");
        Font fuenteTitulo = new Font("Segoe UI", Font.BOLD, 22);

        JPanel headerPanel = new JPanel(new BorderLayout());
        headerPanel.setBackground(fondo);
        headerPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        ImageIcon logo = new ImageIcon(getClass().getResource("/imagenes/rolapet_logo.png"));
        Image img = logo.getImage().getScaledInstance(50, 50, Image.SCALE_SMOOTH);
        JLabel lblLogo = new JLabel(new ImageIcon(img));
        JLabel lblTitulo = new JLabel("Galería de Proveedores", SwingConstants.LEFT);
        lblTitulo.setFont(fuenteTitulo);
        lblTitulo.setForeground(encabezadoColor);
        headerPanel.add(lblLogo, BorderLayout.WEST);
        headerPanel.add(lblTitulo, BorderLayout.CENTER);
        add(headerPanel, BorderLayout.NORTH);

        // Filtros
        JPanel panelFiltros = new JPanel();
        panelFiltros.setBackground(fondo);
        comboTipo = new JComboBox<>(new String[]{"Todos", "Servicio", "Insumo"});
        campoBusqueda = new JTextField(18);
        btnFiltrar = new JButton("Filtrar");
        panelFiltros.add(new JLabel("Tipo:"));
        panelFiltros.add(comboTipo);
        panelFiltros.add(new JLabel("Buscar:"));
        panelFiltros.add(campoBusqueda);
        panelFiltros.add(btnFiltrar);
        add(panelFiltros, BorderLayout.SOUTH);

        // Tabla
        String[] columnas = {"Usuario", "Nombre", "Tipo", "Productos/Servicios"};
        modeloTabla = new DefaultTableModel(columnas, 0);
        tablaProveedores = new JTable(modeloTabla);
        JScrollPane scrollTabla = new JScrollPane(tablaProveedores);
        add(scrollTabla, BorderLayout.CENTER);

        btnAtras = new JButton("Atrás");
        btnAtras.setBackground(Color.GRAY);
        btnAtras.setForeground(Color.WHITE);
        add(btnAtras, BorderLayout.WEST);

        // Cargar todos los proveedores al inicio
        cargarProveedoresDirecto(proveedores, "Todos", "");

        btnFiltrar.addActionListener(e -> {
            String tipo = (String) comboTipo.getSelectedItem();
            String busqueda = campoBusqueda.getText().trim().toLowerCase();
            cargarProveedoresDirecto(proveedores, tipo, busqueda);
        });
    }
    private JTable tablaProveedores;
    private JComboBox<String> comboTipo;
    private JTextField campoBusqueda;
    private JButton btnFiltrar, btnAtras;
    private DefaultTableModel modeloTabla;

    public VentanaGaleriaProveedores(RepositorioUsuarios repoUsuarios) {
        setTitle("Galería de Proveedores");
        setSize(700, 400);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setLayout(new BorderLayout());

        Color fondo = Color.decode("#f5f5dc");
        Color encabezadoColor = Color.decode("#b81b2f");
        Font fuenteTitulo = new Font("Segoe UI", Font.BOLD, 22);

        JPanel headerPanel = new JPanel(new BorderLayout());
        headerPanel.setBackground(fondo);
        headerPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        ImageIcon logo = new ImageIcon(getClass().getResource("/imagenes/rolapet_logo.png"));
        Image img = logo.getImage().getScaledInstance(50, 50, Image.SCALE_SMOOTH);
        JLabel lblLogo = new JLabel(new ImageIcon(img));
        JLabel lblTitulo = new JLabel("Galería de Proveedores", SwingConstants.LEFT);
        lblTitulo.setFont(fuenteTitulo);
        lblTitulo.setForeground(encabezadoColor);
        headerPanel.add(lblLogo, BorderLayout.WEST);
        headerPanel.add(lblTitulo, BorderLayout.CENTER);
        add(headerPanel, BorderLayout.NORTH);

        // Filtros
        JPanel panelFiltros = new JPanel();
        panelFiltros.setBackground(fondo);
        comboTipo = new JComboBox<>(new String[]{"Todos", "Servicio", "Insumo"});
        campoBusqueda = new JTextField(18);
        btnFiltrar = new JButton("Filtrar");
        panelFiltros.add(new JLabel("Tipo:"));
        panelFiltros.add(comboTipo);
        panelFiltros.add(new JLabel("Buscar:"));
        panelFiltros.add(campoBusqueda);
        panelFiltros.add(btnFiltrar);
        add(panelFiltros, BorderLayout.SOUTH);

        // Tabla
        String[] columnas = {"Usuario", "Nombre", "Tipo", "Productos/Servicios"};
        modeloTabla = new DefaultTableModel(columnas, 0);
        tablaProveedores = new JTable(modeloTabla);
        JScrollPane scrollTabla = new JScrollPane(tablaProveedores);
        add(scrollTabla, BorderLayout.CENTER);

        btnAtras = new JButton("Atrás");
        btnAtras.setBackground(Color.GRAY);
        btnAtras.setForeground(Color.WHITE);
        add(btnAtras, BorderLayout.WEST);

        // Cargar todos los proveedores al inicio
        cargarProveedores(repoUsuarios.listarUsuarios(), "Todos", "");

        btnFiltrar.addActionListener(e -> {
            String tipo = (String) comboTipo.getSelectedItem();
            String busqueda = campoBusqueda.getText().trim().toLowerCase();
            cargarProveedores(repoUsuarios.listarUsuarios(), tipo, busqueda);
        });
    }

/**
 * cargarProveedores method.
 * @param usuarios parameter
 * @param tipo parameter
 * @param busqueda parameter
 * @return result
 */
/**
 * cargarProveedores method.
 * @param usuarios parameter
 * @param tipo parameter
 * @param busqueda parameter
 */
/**
 * cargarProveedores method.
 * @param usuarios parameter
 * @param tipo parameter
 * @param busqueda parameter
 */
    private void cargarProveedores(List<udistrital.avanzada.rolapet.modelo.Usuario> usuarios, String tipo, String busqueda) {
        modeloTabla.setRowCount(0);
        List<Proveedor> proveedores = usuarios.stream()
                .filter(u -> u instanceof Proveedor)
                .map(u -> (Proveedor) u)
                .filter(p -> tipo.equals("Todos") || p.getTipoProveedor().equalsIgnoreCase(tipo))
                .filter(p -> busqueda.isEmpty() || p.getNombre().toLowerCase().contains(busqueda) || p.getNombreUsuario().toLowerCase().contains(busqueda))
                .collect(Collectors.toList());
        for (Proveedor p : proveedores) {
            String productos = p.getItems().isEmpty() ? "-" : p.getItems().stream().map(Object::toString).collect(Collectors.joining(", "));
            modeloTabla.addRow(new Object[]{p.getNombreUsuario(), p.getNombre(), p.getTipoProveedor(), productos});
        }
    }

/**
 * setAtrasListener method.
 * @param listener parameter
 * @return result
 */
/**
 * setAtrasListener method.
 * @param listener parameter
 */
/**
 * setAtrasListener method.
 * @param listener parameter
 */
    public void setAtrasListener(java.awt.event.ActionListener listener) {
        btnAtras.addActionListener(listener);
    }
}


===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/vista/VentanaGestionItemsProveedor.java =====

package udistrital.avanzada.rolapet.vista;

import udistrital.avanzada.rolapet.modelo.Item;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.util.List;

/**
 * Ventana para que el proveedor gestione sus ítems (servicios/insumos).
 */
/**
 * Class VentanaGestionItemsProveedor.
 */
/**
 * Class VentanaGestionItemsProveedor.
 */
public class VentanaGestionItemsProveedor extends JFrame {
    private JTable tablaItems;
    private DefaultTableModel modeloTabla;
    private JButton btnCrear;
    private JButton btnEditar;
    private JButton btnEliminar;
    private JButton btnCerrar;

    public VentanaGestionItemsProveedor(List<Item> items) {
        setTitle("Gestión de Ítems del Proveedor");
        setSize(600, 400);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setLayout(new BorderLayout());

        modeloTabla = new DefaultTableModel(new Object[]{"ID", "Título", "Descripción", "Precio"}, 0);
        tablaItems = new JTable(modeloTabla);
        JScrollPane scroll = new JScrollPane(tablaItems);
        add(scroll, BorderLayout.CENTER);

        btnCrear = new JButton("Crear ítem");
        btnEditar = new JButton("Editar ítem");
        btnEliminar = new JButton("Eliminar ítem");
        btnCerrar = new JButton("Cerrar");

        JPanel panelBotones = new JPanel();
        panelBotones.add(btnCrear);
        panelBotones.add(btnEditar);
        panelBotones.add(btnEliminar);
        panelBotones.add(btnCerrar);
        add(panelBotones, BorderLayout.SOUTH);

        cargarItems(items);
    }

/**
 * cargarItems method.
 * @param items parameter
 * @return result
 */
/**
 * cargarItems method.
 * @param items parameter
 */
/**
 * cargarItems method.
 * @param items parameter
 */
    public void cargarItems(List<Item> items) {
        modeloTabla.setRowCount(0);
        for (Item item : items) {
            modeloTabla.addRow(new Object[]{item.getId(), item.getTitulo(), item.getDescripcion(), item.getPrecio()});
        }
    }

/**
 * getTablaItems method.
 * @return result
 */
/**
 * getTablaItems method.
 * @return result
 */
/**
 * getTablaItems method.
 * @return result
 */
    public JTable getTablaItems() { return tablaItems; }
/**
 * getBtnCrear method.
 * @return result
 */
/**
 * getBtnCrear method.
 * @return result
 */
/**
 * getBtnCrear method.
 * @return result
 */
    public JButton getBtnCrear() { return btnCrear; }
/**
 * getBtnEditar method.
 * @return result
 */
/**
 * getBtnEditar method.
 * @return result
 */
/**
 * getBtnEditar method.
 * @return result
 */
    public JButton getBtnEditar() { return btnEditar; }
/**
 * getBtnEliminar method.
 * @return result
 */
/**
 * getBtnEliminar method.
 * @return result
 */
/**
 * getBtnEliminar method.
 * @return result
 */
    public JButton getBtnEliminar() { return btnEliminar; }
/**
 * getBtnCerrar method.
 * @return result
 */
/**
 * getBtnCerrar method.
 * @return result
 */
/**
 * getBtnCerrar method.
 * @return result
 */
    public JButton getBtnCerrar() { return btnCerrar; }
}


===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/vista/VentanaGestionPublicacionesProveedor.java =====

package udistrital.avanzada.rolapet.vista;

import udistrital.avanzada.rolapet.modelo.Publicacion;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.util.List;

/**
 * Ventana para que el proveedor gestione sus publicaciones (eventos/promociones).
 */
/**
 * Class VentanaGestionPublicacionesProveedor.
 */
/**
 * Class VentanaGestionPublicacionesProveedor.
 */
public class VentanaGestionPublicacionesProveedor extends JFrame {
    private JTable tablaPublicaciones;
    private DefaultTableModel modeloTabla;
    private JButton btnCrear;
    private JButton btnEditar;
    private JButton btnEliminar;
    private JButton btnCerrar;

    public VentanaGestionPublicacionesProveedor(List<Publicacion> publicaciones) {
        setTitle("Gestión de Publicaciones del Proveedor");
        setSize(650, 400);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setLayout(new BorderLayout());

        modeloTabla = new DefaultTableModel(new Object[]{"Título", "Tipo", "Fecha", "Descripción"}, 0);
        tablaPublicaciones = new JTable(modeloTabla);
        JScrollPane scroll = new JScrollPane(tablaPublicaciones);
        add(scroll, BorderLayout.CENTER);

        btnCrear = new JButton("Crear publicación");
        btnEditar = new JButton("Editar publicación");
        btnEliminar = new JButton("Eliminar publicación");
        btnCerrar = new JButton("Cerrar");

        JPanel panelBotones = new JPanel();
        panelBotones.add(btnCrear);
        panelBotones.add(btnEditar);
        panelBotones.add(btnEliminar);
        panelBotones.add(btnCerrar);
        add(panelBotones, BorderLayout.SOUTH);

        cargarPublicaciones(publicaciones);
    }

/**
 * cargarPublicaciones method.
 * @param publicaciones parameter
 * @return result
 */
/**
 * cargarPublicaciones method.
 * @param publicaciones parameter
 */
/**
 * cargarPublicaciones method.
 * @param publicaciones parameter
 */
    public void cargarPublicaciones(List<Publicacion> publicaciones) {
        modeloTabla.setRowCount(0);
        for (Publicacion pub : publicaciones) {
            modeloTabla.addRow(new Object[]{pub.getTitulo(), pub.getTipo(), pub.getFecha(), pub.getDescripcion()});
        }
    }

/**
 * getTablaPublicaciones method.
 * @return result
 */
/**
 * getTablaPublicaciones method.
 * @return result
 */
/**
 * getTablaPublicaciones method.
 * @return result
 */
    public JTable getTablaPublicaciones() { return tablaPublicaciones; }
/**
 * getBtnCrear method.
 * @return result
 */
/**
 * getBtnCrear method.
 * @return result
 */
/**
 * getBtnCrear method.
 * @return result
 */
    public JButton getBtnCrear() { return btnCrear; }
/**
 * getBtnEditar method.
 * @return result
 */
/**
 * getBtnEditar method.
 * @return result
 */
/**
 * getBtnEditar method.
 * @return result
 */
    public JButton getBtnEditar() { return btnEditar; }
/**
 * getBtnEliminar method.
 * @return result
 */
/**
 * getBtnEliminar method.
 * @return result
 */
/**
 * getBtnEliminar method.
 * @return result
 */
    public JButton getBtnEliminar() { return btnEliminar; }
/**
 * getBtnCerrar method.
 * @return result
 */
/**
 * getBtnCerrar method.
 * @return result
 */
/**
 * getBtnCerrar method.
 * @return result
 */
    public JButton getBtnCerrar() { return btnCerrar; }
}


===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/vista/VentanaGestionUsuarios.java =====

package udistrital.avanzada.rolapet.vista;

import javax.swing.*;
import java.awt.*;
import java.util.List;
import udistrital.avanzada.rolapet.modelo.Usuario;
import udistrital.avanzada.rolapet.modelo.RepositorioUsuarios;

/**
 * Ventana Swing para la gestión de usuarios: listar, agregar, eliminar.
 * @author Sarita
 * @version 1.0, 27-09-2025
 */
/**
 * Class VentanaGestionUsuarios.
 */
/**
 * Class VentanaGestionUsuarios.
 */
public class VentanaGestionUsuarios extends JFrame {
    private RepositorioUsuarios repositorio;
    private DefaultListModel<String> modeloLista;
    private JList<String> listaUsuarios;

    public VentanaGestionUsuarios(RepositorioUsuarios repositorio) {
        this.repositorio = repositorio;
        setTitle("Gestión de Usuarios");
        setSize(420, 420);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setLayout(new BorderLayout());

        // Panel superior con logo y título
        JPanel panelSuperior = new JPanel(new BorderLayout());
        panelSuperior.setBackground(new Color(30, 60, 150));
        JLabel lblLogo = new JLabel();
        lblLogo.setHorizontalAlignment(SwingConstants.CENTER);
        try {
            ImageIcon icon = new ImageIcon(getClass().getResource("/imagenes/rolapet_logo.png"));
            lblLogo.setIcon(new ImageIcon(icon.getImage().getScaledInstance(80, 80, java.awt.Image.SCALE_SMOOTH)));
        } catch (Exception e) {
            lblLogo.setText("ROLAPET");
            lblLogo.setFont(new Font("Arial", Font.BOLD, 28));
            lblLogo.setForeground(Color.WHITE);
        }
        JLabel lblTitulo = new JLabel("Gestión de Usuarios", SwingConstants.CENTER);
        lblTitulo.setFont(new Font("Arial", Font.BOLD, 22));
        lblTitulo.setForeground(Color.WHITE);
        panelSuperior.add(lblLogo, BorderLayout.NORTH);
        panelSuperior.add(lblTitulo, BorderLayout.CENTER);
        add(panelSuperior, BorderLayout.NORTH);

        // Panel central con lista
        modeloLista = new DefaultListModel<>();
        listaUsuarios = new JList<>(modeloLista);
        listaUsuarios.setFont(new Font("Arial", Font.PLAIN, 16));
        listaUsuarios.setBackground(new Color(230, 240, 255));
        actualizarLista();
        add(new JScrollPane(listaUsuarios), BorderLayout.CENTER);

        // Panel de botones inferior
        JPanel panelBotones = new JPanel();
        panelBotones.setBackground(new Color(30, 60, 150));
        JButton btnAgregar = new JButton("Agregar");
        JButton btnEliminar = new JButton("Eliminar");
        btnAgregar.setBackground(new Color(0, 120, 215));
        btnAgregar.setForeground(Color.WHITE);
        btnEliminar.setBackground(new Color(200, 0, 0));
        btnEliminar.setForeground(Color.WHITE);
        btnAgregar.setFont(new Font("Arial", Font.BOLD, 15));
        btnEliminar.setFont(new Font("Arial", Font.BOLD, 15));
        panelBotones.add(btnAgregar);
        panelBotones.add(btnEliminar);
        add(panelBotones, BorderLayout.SOUTH);

        btnAgregar.addActionListener(e -> agregarUsuario());
        btnEliminar.addActionListener(e -> eliminarUsuario());
    }

/**
 * actualizarLista method.
 * @return result
 */
/**
 * actualizarLista method.
 */
/**
 * actualizarLista method.
 */
    private void actualizarLista() {
        modeloLista.clear();
        List<Usuario> usuarios = repositorio.listarUsuarios();
        for (Usuario u : usuarios) {
            modeloLista.addElement(u.getNombreUsuario() + " - " + u.getCorreo());
        }
    }

/**
 * agregarUsuario method.
 * @return result
 */
/**
 * agregarUsuario method.
 */
/**
 * agregarUsuario method.
 */
    private void agregarUsuario() {
        String nombreUsuario = JOptionPane.showInputDialog(this, "Correo del usuario:");
        if (nombreUsuario != null && !nombreUsuario.trim().isEmpty()) {
            // Aquí podrías abrir un formulario completo, por simplicidad solo correo
            Usuario nuevo = new Usuario(nombreUsuario, "1234", "Nombre", "Apellido", "1234567890", nombreUsuario, "3001234567") {
            };
            repositorio.agregarUsuario(nuevo);
            actualizarLista();
        }
    }

/**
 * eliminarUsuario method.
 * @return result
 */
/**
 * eliminarUsuario method.
 */
/**
 * eliminarUsuario method.
 */
    private void eliminarUsuario() {
        int idx = listaUsuarios.getSelectedIndex();
        if (idx >= 0) {
            Usuario usuario = repositorio.listarUsuarios().get(idx);
            repositorio.eliminarUsuario(usuario);
            actualizarLista();
        }
    }
}


===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/vista/VentanaGestionVehiculos.java =====

package udistrital.avanzada.rolapet.vista;

import javax.swing.*;
import java.awt.*;
import java.util.List;
import udistrital.avanzada.rolapet.modelo.Vehiculo;
import udistrital.avanzada.rolapet.modelo.RepositorioVehiculos;

/**
 * Ventana Swing para la gestión de vehículos: listar, agregar, eliminar.
 * @author Sarita
 * @version 1.0, 27-09-2025
 */
/**
 * Class VentanaGestionVehiculos.
 */
/**
 * Class VentanaGestionVehiculos.
 */
public class VentanaGestionVehiculos extends JFrame {
    private RepositorioVehiculos repositorio;
    private DefaultListModel<String> modeloLista;
    private JList<String> listaVehiculos;

    public VentanaGestionVehiculos(RepositorioVehiculos repositorio) {
        this.repositorio = repositorio;
        setTitle("Gestión de Vehículos");
        setSize(420, 420);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setLayout(new BorderLayout());

        // Panel superior con logo y título
        JPanel panelSuperior = new JPanel(new BorderLayout());
        panelSuperior.setBackground(new Color(30, 60, 150));
        JLabel lblLogo = new JLabel();
        lblLogo.setHorizontalAlignment(SwingConstants.CENTER);
        try {
            ImageIcon icon = new ImageIcon(getClass().getResource("/imagenes/rolapet_logo.png"));
            lblLogo.setIcon(new ImageIcon(icon.getImage().getScaledInstance(80, 80, java.awt.Image.SCALE_SMOOTH)));
        } catch (Exception e) {
            lblLogo.setText("ROLAPET");
            lblLogo.setFont(new Font("Arial", Font.BOLD, 28));
            lblLogo.setForeground(Color.WHITE);
        }
        JLabel lblTitulo = new JLabel("Gestión de Vehículos", SwingConstants.CENTER);
        lblTitulo.setFont(new Font("Arial", Font.BOLD, 22));
        lblTitulo.setForeground(Color.WHITE);
        panelSuperior.add(lblLogo, BorderLayout.NORTH);
        panelSuperior.add(lblTitulo, BorderLayout.CENTER);
        add(panelSuperior, BorderLayout.NORTH);

        // Panel central con lista
        modeloLista = new DefaultListModel<>();
        listaVehiculos = new JList<>(modeloLista);
        listaVehiculos.setFont(new Font("Arial", Font.PLAIN, 16));
        listaVehiculos.setBackground(new Color(230, 240, 255));
        actualizarLista();
        add(new JScrollPane(listaVehiculos), BorderLayout.CENTER);

        // Panel de botones inferior
        JPanel panelBotones = new JPanel();
        panelBotones.setBackground(new Color(30, 60, 150));
        JButton btnAgregar = new JButton("Agregar");
        JButton btnEliminar = new JButton("Eliminar");
        btnAgregar.setBackground(new Color(0, 120, 215));
        btnAgregar.setForeground(Color.WHITE);
        btnEliminar.setBackground(new Color(200, 0, 0));
        btnEliminar.setForeground(Color.WHITE);
        btnAgregar.setFont(new Font("Arial", Font.BOLD, 15));
        btnEliminar.setFont(new Font("Arial", Font.BOLD, 15));
        panelBotones.add(btnAgregar);
        panelBotones.add(btnEliminar);
        add(panelBotones, BorderLayout.SOUTH);

        btnAgregar.addActionListener(e -> agregarVehiculo());
        btnEliminar.addActionListener(e -> eliminarVehiculo());
    }

/**
 * actualizarLista method.
 * @return result
 */
/**
 * actualizarLista method.
 */
/**
 * actualizarLista method.
 */
    private void actualizarLista() {
        modeloLista.clear();
        List<Vehiculo> vehiculos = repositorio.listarVehiculos();
        for (Vehiculo v : vehiculos) {
            modeloLista.addElement(v.getPlaca() + " - " + v.getMarca() + " " + v.getModelo());
        }
    }

/**
 * agregarVehiculo method.
 * @return result
 */
/**
 * agregarVehiculo method.
 */
/**
 * agregarVehiculo method.
 */
    private void agregarVehiculo() {
        String placa = JOptionPane.showInputDialog(this, "Placa del vehículo:");
        if (placa != null && !placa.trim().isEmpty()) {
            // Aquí podrías abrir un formulario completo, por simplicidad solo placa
            Vehiculo nuevo = new Vehiculo("Marca", "Modelo", placa, 50.0, 500, 45.0);
            repositorio.agregarVehiculo(nuevo);
            actualizarLista();
        }
    }

/**
 * eliminarVehiculo method.
 * @return result
 */
/**
 * eliminarVehiculo method.
 */
/**
 * eliminarVehiculo method.
 */
    private void eliminarVehiculo() {
        int idx = listaVehiculos.getSelectedIndex();
        if (idx >= 0) {
            Vehiculo vehiculo = repositorio.listarVehiculos().get(idx);
            repositorio.eliminarVehiculo(vehiculo);
            actualizarLista();
        }
    }
}


===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/vista/VentanaInicio.java =====

package udistrital.avanzada.rolapet.vista;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionListener;

/**
 * Clase VentanaInicio que representa la pantalla principal de inicio de la aplicación.
 * Contiene botones para navegar a las secciones de Usuarios, Administradores y Proveedores.
 * Presenta un diseño con colores personalizados, logo y título.
 * 
 * @author Sarita
 * @version 1.1, 21-09-2025
 */
/**
 * Class VentanaInicio.
 */
/**
 * Class VentanaInicio.
 */
public class VentanaInicio extends JFrame {
/**
 * JButton method.
 * @param "Usuarios" parameter
 */
    public JButton btnUsuarios = new JButton("Usuarios");
/**
 * JButton method.
 * @param "Administradores" parameter
 */
    public JButton btnAdministradores = new JButton("Administradores");
/**
 * JButton method.
 * @param "Proveedores" parameter
 */
    public JButton btnProveedores = new JButton("Proveedores");

    /**
     * Constructor que inicializa la ventana con su diseño y componentes.
     * Configura colores, fuentes, logo, título y el layout de los botones.
     */
    public VentanaInicio() {
        Color fondo = Color.decode("#f5f5dc");
        Color encabezadoColor = Color.decode("#b81b2f");

        btnUsuarios.setBackground(encabezadoColor);
        btnUsuarios.setForeground(Color.WHITE);
        btnUsuarios.setOpaque(true);

        btnAdministradores.setBackground(encabezadoColor);
        btnAdministradores.setForeground(Color.WHITE);
        btnAdministradores.setOpaque(true);

        btnProveedores.setBackground(encabezadoColor);
        btnProveedores.setForeground(Color.WHITE);
        btnProveedores.setOpaque(true);

        Font fuenteTitulo = new Font("Segoe UI", Font.BOLD, 24);

        setLayout(new BorderLayout());

        JPanel headerPanel = new JPanel(new BorderLayout());
        headerPanel.setBackground(fondo);
        headerPanel.setBorder(BorderFactory.createEmptyBorder(15, 15, 15, 15));

        ImageIcon logo = new ImageIcon(getClass().getResource("/imagenes/rolapet_logo.png"));
        Image img = logo.getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH);
        JLabel lblLogo = new JLabel(new ImageIcon(img));

        JLabel lblTitulo = new JLabel("Rolapet", SwingConstants.LEFT);
        lblTitulo.setFont(fuenteTitulo);
        lblTitulo.setForeground(encabezadoColor);

        headerPanel.add(lblLogo, BorderLayout.WEST);
        headerPanel.add(lblTitulo, BorderLayout.CENTER);
        add(headerPanel, BorderLayout.NORTH);

        setTitle("Ventana Inicio");
        setSize(400, 300);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JPanel panelBotones = new JPanel();
        panelBotones.setLayout(new BoxLayout(panelBotones, BoxLayout.Y_AXIS));
        panelBotones.setBackground(fondo);

        btnUsuarios.setAlignmentX(Component.CENTER_ALIGNMENT);
        btnAdministradores.setAlignmentX(Component.CENTER_ALIGNMENT);
        btnProveedores.setAlignmentX(Component.CENTER_ALIGNMENT);

        panelBotones.add(Box.createVerticalGlue());
        panelBotones.add(btnUsuarios);
        panelBotones.add(Box.createRigidArea(new Dimension(0, 15)));
        panelBotones.add(btnAdministradores);
        panelBotones.add(Box.createRigidArea(new Dimension(0, 15)));
        panelBotones.add(btnProveedores);
        panelBotones.add(Box.createVerticalGlue());

        getContentPane().add(panelBotones);
        setLocationRelativeTo(null);
    }

    /**
     * Asigna el mismo ActionListener controlador a los botones de la ventana.
     * 
     * @param controlador ActionListener que manejará los eventos de los botones
     */
/**
 * setControlador method.
 * @param controlador parameter
 * @return result
 */
/**
 * setControlador method.
 * @param controlador parameter
 */
/**
 * setControlador method.
 * @param controlador parameter
 */
    public void setControlador(ActionListener controlador) {
        btnUsuarios.addActionListener(controlador);
        btnAdministradores.addActionListener(controlador);
        btnProveedores.addActionListener(controlador);
    }
}


===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/vista/VentanaInicioUsuario.java =====

package udistrital.avanzada.rolapet.vista;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionListener;
import udistrital.avanzada.rolapet.modelo.Publicacion;
import udistrital.avanzada.rolapet.modelo.RepositorioPublicaciones;
import udistrital.avanzada.rolapet.modelo.Usuario;
import udistrital.avanzada.rolapet.modelo.RepositorioUsuarios;

/**
 * Ventana principal del usuario: muestra perfil, amigos, vehículos, publicaciones y búsqueda.
 * @author Sarita
 * @version 1.0, 27-09-2025
 */
/**
 * Class VentanaInicioUsuario.
 */
/**
 * Class VentanaInicioUsuario.
 */
public class VentanaInicioUsuario extends JFrame {
    private Usuario usuario;
    private RepositorioUsuarios repositorioUsuarios;
    private RepositorioPublicaciones repoPublicaciones;
    private JFrame ventanaPrincipal;

    // Botones públicos para que el gestor pueda añadirles ActionListener
    public JButton btnCerrarSesion;
    public JButton btnAgregarAmigos;
    public JButton btnVerProveedores;
    public JButton btnMostrarVehiculos;

    private JList<String> listaPublicaciones;
    private DefaultListModel<String> modeloLista;

    public VentanaInicioUsuario(Usuario usuario, RepositorioUsuarios repositorioUsuarios,
                                RepositorioPublicaciones repoPublicaciones, JFrame ventanaPrincipal) {
        // Asignar atributos
        this.usuario = usuario;
        this.repositorioUsuarios = repositorioUsuarios;
        this.repoPublicaciones = repoPublicaciones;
        this.ventanaPrincipal = ventanaPrincipal;

        // Configuración de la ventana
        setTitle("Inicio Usuario");
        setSize(900, 600);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setLayout(new BorderLayout());

        Color fondo = Color.decode("#f5f5dc");
        Color encabezadoColor = Color.decode("#b81b2f");
        Font fuenteTitulo = new Font("Segoe UI", Font.BOLD, 24);
        Font fuenteBotones = new Font("Segoe UI", Font.BOLD, 15);

        // Modelo para publicaciones
        modeloLista = new DefaultListModel<>();
        listaPublicaciones = new JList<>(modeloLista);
        add(new JScrollPane(listaPublicaciones), BorderLayout.CENTER);

        // Panel superior: perfil y logo
        JPanel panelSuperior = new JPanel(new BorderLayout());
        panelSuperior.setBackground(fondo);
        panelSuperior.setBorder(BorderFactory.createEmptyBorder(15, 15, 15, 15));

        ImageIcon logo = new ImageIcon(getClass().getResource("/imagenes/rolapet_logo.png"));
        Image img = logo.getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH);
        JLabel lblLogo = new JLabel(new ImageIcon(img));

        JLabel lblTitulo = new JLabel("Rolapet - Inicio Usuario", SwingConstants.LEFT);
        lblTitulo.setFont(fuenteTitulo);
        lblTitulo.setForeground(encabezadoColor);

        panelSuperior.add(lblLogo, BorderLayout.WEST);
        panelSuperior.add(lblTitulo, BorderLayout.CENTER);
        add(panelSuperior, BorderLayout.NORTH);

        // Crear los botones
        btnCerrarSesion = new JButton("Cerrar sesión");
        btnAgregarAmigos = new JButton("Agregar Amigos");
        btnMostrarVehiculos = new JButton("Mis Vehículos");
        btnVerProveedores = new JButton("Ver Proveedores");

        // Panel izquierdo: opciones
        JPanel panelIzquierdo = new JPanel();
        panelIzquierdo.setLayout(new BoxLayout(panelIzquierdo, BoxLayout.Y_AXIS));
        panelIzquierdo.setBackground(fondo);

        // Alinear botones
        btnAgregarAmigos.setAlignmentX(Component.CENTER_ALIGNMENT);
        btnMostrarVehiculos.setAlignmentX(Component.CENTER_ALIGNMENT);
        btnVerProveedores.setAlignmentX(Component.CENTER_ALIGNMENT);
        btnCerrarSesion.setAlignmentX(Component.CENTER_ALIGNMENT);

        // Colores
        btnAgregarAmigos.setBackground(encabezadoColor);
        btnAgregarAmigos.setForeground(Color.WHITE);

        btnMostrarVehiculos.setBackground(encabezadoColor);
        btnMostrarVehiculos.setForeground(Color.WHITE);

        btnVerProveedores.setBackground(encabezadoColor);
        btnVerProveedores.setForeground(Color.WHITE);

        btnCerrarSesion.setBackground(Color.GRAY);
        btnCerrarSesion.setForeground(Color.WHITE);

        // Fuentes
        btnAgregarAmigos.setFont(fuenteBotones);
        btnMostrarVehiculos.setFont(fuenteBotones);
        btnVerProveedores.setFont(fuenteBotones);
        btnCerrarSesion.setFont(fuenteBotones);

        // Añadir botones al panel
        panelIzquierdo.add(Box.createVerticalStrut(30));
        panelIzquierdo.add(btnAgregarAmigos);
        panelIzquierdo.add(Box.createVerticalStrut(20));
        panelIzquierdo.add(btnMostrarVehiculos);
        panelIzquierdo.add(Box.createVerticalStrut(30));
        panelIzquierdo.add(btnVerProveedores);
        panelIzquierdo.add(Box.createVerticalStrut(20));
        panelIzquierdo.add(btnCerrarSesion);
        add(panelIzquierdo, BorderLayout.WEST);

        // Cargar publicaciones iniciales
        cargarPublicaciones();
    }

/**
 * cargarPublicaciones method.
 * @return result
 */
/**
 * cargarPublicaciones method.
 */
/**
 * cargarPublicaciones method.
 */
    public void cargarPublicaciones() {
        modeloLista.clear();
        if (repoPublicaciones != null) {
            for (Publicacion pub : repoPublicaciones.listarPublicaciones()) {
                modeloLista.addElement(pub.getTitulo() + " - " + pub.getDescripcion());
            }
        }
    }

    /**
     * Asigna un ActionListener al botón Cerrar sesión para que el gestor pueda controlar el evento
     */
/**
 * setCerrarSesionListener method.
 * @param listener parameter
 * @return result
 */
/**
 * setCerrarSesionListener method.
 * @param listener parameter
 */
/**
 * setCerrarSesionListener method.
 * @param listener parameter
 */
    public void setCerrarSesionListener(ActionListener listener) {
        btnCerrarSesion.addActionListener(listener);
    }
}


===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/vista/VentanaProveedor.java =====

package udistrital.avanzada.rolapet.vista;

import javax.swing.*;
import java.awt.*;

/**
 * Class VentanaProveedor.
 */
/**
 * Class VentanaProveedor.
 */
public class VentanaProveedor extends JFrame {

    private JButton btnVerPublicaciones;
    private JButton btnAgregarItem;
    private JButton btnCrearPublicacion;
    private JButton btnCerrarSesion;

    public VentanaProveedor(String nombreProveedor, String tipoProveedor) {
        Color fondo = Color.decode("#f5f5dc");
        Color encabezadoColor = Color.decode("#b81b2f");

        setTitle("Panel Proveedor - " + tipoProveedor);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setSize(400, 300);
        setLocationRelativeTo(null);
        setLayout(new BorderLayout());

        // Panel superior con logo y título
        JPanel headerPanel = new JPanel(new BorderLayout());
        headerPanel.setBackground(fondo);
        headerPanel.setBorder(BorderFactory.createEmptyBorder(15, 15, 15, 15));

        ImageIcon logo = new ImageIcon(getClass().getResource("/imagenes/rolapet_logo.png"));
        Image img = logo.getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH);
        JLabel lblLogo = new JLabel(new ImageIcon(img));

        JLabel lblTitulo = new JLabel("Rolapet - Proveedor", SwingConstants.LEFT);
        lblTitulo.setFont(new Font("Segoe UI", Font.BOLD, 22));
        lblTitulo.setForeground(encabezadoColor);

        headerPanel.add(lblLogo, BorderLayout.WEST);
        headerPanel.add(lblTitulo, BorderLayout.CENTER);
        add(headerPanel, BorderLayout.NORTH);

        // Panel de bienvenida reducido
        JLabel lblBienvenida = new JLabel("Bienvenido " + nombreProveedor + " (" + tipoProveedor + ")", SwingConstants.CENTER);
        lblBienvenida.setFont(new Font("Segoe UI", Font.PLAIN, 13));
        lblBienvenida.setForeground(encabezadoColor);
        lblBienvenida.setBorder(BorderFactory.createEmptyBorder(5, 0, 5, 0));

        // Panel de botones más grande
        JPanel panelBotones = new JPanel();
        panelBotones.setLayout(new BoxLayout(panelBotones, BoxLayout.Y_AXIS));
        panelBotones.setBackground(fondo);
        panelBotones.setBorder(BorderFactory.createEmptyBorder(20, 40, 20, 40));

        btnVerPublicaciones = new JButton("Ver mis publicaciones");
        btnAgregarItem = new JButton("Agregar nuevo ítem");
        btnCrearPublicacion = new JButton("Crear publicación");
        btnCerrarSesion = new JButton("Cerrar sesión");

        btnVerPublicaciones.setAlignmentX(Component.CENTER_ALIGNMENT);
        btnAgregarItem.setAlignmentX(Component.CENTER_ALIGNMENT);
        btnCrearPublicacion.setAlignmentX(Component.CENTER_ALIGNMENT);
        btnCerrarSesion.setAlignmentX(Component.CENTER_ALIGNMENT);

        btnVerPublicaciones.setBackground(encabezadoColor);
        btnVerPublicaciones.setForeground(Color.WHITE);
        btnVerPublicaciones.setOpaque(true);
        btnVerPublicaciones.setFont(new Font("Segoe UI", Font.BOLD, 15));
        btnVerPublicaciones.setMaximumSize(new Dimension(220, 40));

        btnAgregarItem.setBackground(encabezadoColor);
        btnAgregarItem.setForeground(Color.WHITE);
        btnAgregarItem.setOpaque(true);
        btnAgregarItem.setFont(new Font("Segoe UI", Font.BOLD, 15));
        btnAgregarItem.setMaximumSize(new Dimension(220, 40));

        btnCrearPublicacion.setBackground(encabezadoColor);
        btnCrearPublicacion.setForeground(Color.WHITE);
        btnCrearPublicacion.setOpaque(true);
        btnCrearPublicacion.setFont(new Font("Segoe UI", Font.BOLD, 15));
        btnCrearPublicacion.setMaximumSize(new Dimension(220, 40));

        btnCerrarSesion.setBackground(encabezadoColor);
        btnCerrarSesion.setForeground(Color.WHITE);
        btnCerrarSesion.setOpaque(true);
        btnCerrarSesion.setFont(new Font("Segoe UI", Font.BOLD, 15));
        btnCerrarSesion.setMaximumSize(new Dimension(220, 40));

        panelBotones.add(Box.createVerticalStrut(10));
        panelBotones.add(btnVerPublicaciones);
        panelBotones.add(Box.createVerticalStrut(15));
        panelBotones.add(btnAgregarItem);
        panelBotones.add(Box.createVerticalStrut(15));
        panelBotones.add(btnCrearPublicacion);
        panelBotones.add(Box.createVerticalStrut(15));
        panelBotones.add(btnCerrarSesion);
        panelBotones.add(Box.createVerticalStrut(10));

        JPanel centro = new JPanel(new BorderLayout());
        centro.setBackground(fondo);
        centro.add(lblBienvenida, BorderLayout.NORTH);
        centro.add(panelBotones, BorderLayout.CENTER);
        add(centro, BorderLayout.CENTER);
    }

/**
 * getBtnVerPublicaciones method.
 * @return result
 */
/**
 * getBtnVerPublicaciones method.
 * @return result
 */
/**
 * getBtnVerPublicaciones method.
 * @return result
 */
    public JButton getBtnVerPublicaciones() {
        return btnVerPublicaciones;
    }

/**
 * getBtnAgregarItem method.
 * @return result
 */
/**
 * getBtnAgregarItem method.
 * @return result
 */
/**
 * getBtnAgregarItem method.
 * @return result
 */
    public JButton getBtnAgregarItem() {
        return btnAgregarItem;
    }


/**
 * getBtnCrearPublicacion method.
 * @return result
 */
/**
 * getBtnCrearPublicacion method.
 * @return result
 */
/**
 * getBtnCrearPublicacion method.
 * @return result
 */
    public JButton getBtnCrearPublicacion() {
        return btnCrearPublicacion;
    }
/**
 * getBtnCerrarSesion method.
 * @return result
 */
/**
 * getBtnCerrarSesion method.
 * @return result
 */
/**
 * getBtnCerrarSesion method.
 * @return result
 */
    public JButton getBtnCerrarSesion() {
        return btnCerrarSesion;
    }

/**
 * setControlador method.
 * @param controlador parameter
 * @return result
 */
/**
 * setControlador method.
 * @param controlador parameter
 */
/**
 * setControlador method.
 * @param controlador parameter
 */
    public void setControlador(java.awt.event.ActionListener controlador) {
        btnVerPublicaciones.addActionListener(controlador);
        btnAgregarItem.addActionListener(controlador);
        btnCrearPublicacion.addActionListener(controlador);
        btnCerrarSesion.addActionListener(controlador);
    }
}


===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/vista/VentanaRegistroVehiculo.java =====

package udistrital.avanzada.rolapet.vista;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ItemEvent;

/**
 * Clase VentanaRegistroVehiculo que representa la ventana para registrar vehículos.
 * Permite seleccionar el tipo de vehículo (Scooter o Motoeléctrica), ingresar atributos generales
 * y específicos según el tipo seleccionado, y cuenta con botones para registrar o cancelar.
 * Los campos específicos se muestran u ocultan dinámicamente según el tipo seleccionado.
 * 
 * @author Sarita
 * @version 1.1, 25-09-2025
 */
/**
 * Class VentanaRegistroVehiculo.
 */
/**
 * Class VentanaRegistroVehiculo.
 */
public class VentanaRegistroVehiculo extends JFrame {
    private JFrame owner;
    private JComboBox<String> comboTipoVehiculo;
    private JTextField campoMarca, campoModelo, campoPlaca, campoAutonomia, campoPotencia, campoVelocidad;
    private JCheckBox chkLlantasOffRoad, chkIluminacionAvanzada;
    private JCheckBox chkFrenosDisco, chkSuspensionAlta, chkLucesLED, chkAlarmaAntiRobo;

    private JButton btnRegistrar, btnCancelar;

    /**
     * Constructor que inicializa la ventana y sus componentes con diseño personalizado
     * y comportamiento dinámico para mostrar u ocultar campos específicos según el tipo de vehículo.
     */
    public VentanaRegistroVehiculo() {
        this(null);
    }

    public VentanaRegistroVehiculo(JFrame owner) {
        super("Registro de Vehículo");
        this.owner = owner;

        Color fondo = Color.decode("#f5f5dc");
        Color encabezadoColor = Color.decode("#b81b2f");
        Font fuenteLabels = new Font("Segoe UI", Font.PLAIN, 14);
        Font fuenteBotones = new Font("Segoe UI", Font.BOLD, 14);
        Font fuenteTitulo = new Font("Segoe UI", Font.BOLD, 24);

        setSize(500, 450);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setLocationRelativeTo(null);
        setLayout(new BorderLayout());

        // Panel header con logo
        JPanel headerPanel = new JPanel(new BorderLayout());
        headerPanel.setBackground(fondo);
        headerPanel.setBorder(BorderFactory.createEmptyBorder(15, 15, 15, 15));

        ImageIcon logo = new ImageIcon(getClass().getResource("/imagenes/rolapet_logo.png"));
        Image img = logo.getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH);
        JLabel lblLogo = new JLabel(new ImageIcon(img));
        headerPanel.add(lblLogo, BorderLayout.WEST);

        JLabel lblTitulo = new JLabel("Rolapet - Registro de Vehículo");
        lblTitulo.setFont(fuenteTitulo);
        lblTitulo.setForeground(encabezadoColor);
        headerPanel.add(lblTitulo, BorderLayout.CENTER);

        add(headerPanel, BorderLayout.NORTH);

        // Panel con formulario
        JPanel panelFormulario = new JPanel(new GridBagLayout());
        panelFormulario.setBackground(fondo);

        GridBagConstraints gbc = new GridBagConstraints();
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(5,5,5,5);

        // Combo tipo vehículo
        gbc.gridx = 0; gbc.gridy = 0;
        JLabel lblTipo = new JLabel("Tipo de vehículo:");
        lblTipo.setFont(fuenteLabels);
        panelFormulario.add(lblTipo, gbc);

        comboTipoVehiculo = new JComboBox<>(new String[]{"Scooter", "Motoeléctrica"});
        gbc.gridx = 1;
        panelFormulario.add(comboTipoVehiculo, gbc);


    // Placa
    gbc.gridy++;
    gbc.gridx = 0;
    JLabel lblPlaca = new JLabel("Placa:");
    lblPlaca.setFont(fuenteLabels);
    panelFormulario.add(lblPlaca, gbc);
    gbc.gridx = 1;
    campoPlaca = new JTextField(20);
    panelFormulario.add(campoPlaca, gbc);

    // Marca
    gbc.gridy++;
    gbc.gridx = 0;
    JLabel lblMarca = new JLabel("Marca:");
    lblMarca.setFont(fuenteLabels);
    panelFormulario.add(lblMarca, gbc);
    gbc.gridx = 1;
    campoMarca = new JTextField(20);
    panelFormulario.add(campoMarca, gbc);

        // Modelo
        gbc.gridy++;
        gbc.gridx = 0;
        JLabel lblModelo = new JLabel("Modelo:");
        lblModelo.setFont(fuenteLabels);
        panelFormulario.add(lblModelo, gbc);
        gbc.gridx = 1;
        campoModelo = new JTextField(20);
        panelFormulario.add(campoModelo, gbc);

        // Autonomía
        gbc.gridy++;
        gbc.gridx = 0;
        JLabel lblAutonomia = new JLabel("Autonomía (km):");
        lblAutonomia.setFont(fuenteLabels);
        panelFormulario.add(lblAutonomia, gbc);
        gbc.gridx = 1;
        campoAutonomia = new JTextField(20);
        panelFormulario.add(campoAutonomia, gbc);

        // Potencia nominal
        gbc.gridy++;
        gbc.gridx = 0;
        JLabel lblPotencia = new JLabel("Potencia nominal (W):");
        lblPotencia.setFont(fuenteLabels);
        panelFormulario.add(lblPotencia, gbc);
        gbc.gridx = 1;
        campoPotencia = new JTextField(20);
        panelFormulario.add(campoPotencia, gbc);

        // Velocidad máxima
        gbc.gridy++;
        gbc.gridx = 0;
        JLabel lblVelocidad = new JLabel("Velocidad máxima (km/h):");
        lblVelocidad.setFont(fuenteLabels);
        panelFormulario.add(lblVelocidad, gbc);
        gbc.gridx = 1;
        campoVelocidad = new JTextField(20);
        panelFormulario.add(campoVelocidad, gbc);

        // Campos específicos scooter
        gbc.gridy++;
        gbc.gridx = 0;
        chkLlantasOffRoad = new JCheckBox("Llantas off-road");
        chkLlantasOffRoad.setFont(fuenteLabels);
        chkLlantasOffRoad.setBackground(fondo);
        panelFormulario.add(chkLlantasOffRoad, gbc);

        gbc.gridx = 1;
        chkIluminacionAvanzada = new JCheckBox("Iluminación avanzada");
        chkIluminacionAvanzada.setFont(fuenteLabels);
        chkIluminacionAvanzada.setBackground(fondo);
        panelFormulario.add(chkIluminacionAvanzada, gbc);

        // Campos específicos moto eléctrica
        gbc.gridy++;
        gbc.gridx = 0;
        chkFrenosDisco = new JCheckBox("Frenos de disco");
        chkFrenosDisco.setFont(fuenteLabels);
        chkFrenosDisco.setBackground(fondo);
        panelFormulario.add(chkFrenosDisco, gbc);

        gbc.gridx = 1;
        chkSuspensionAlta = new JCheckBox("Suspensión alta calidad");
        chkSuspensionAlta.setFont(fuenteLabels);
        chkSuspensionAlta.setBackground(fondo);
        panelFormulario.add(chkSuspensionAlta, gbc);

        gbc.gridy++;
        gbc.gridx = 0;
        chkLucesLED = new JCheckBox("Luces LED");
        chkLucesLED.setFont(fuenteLabels);
        chkLucesLED.setBackground(fondo);
        panelFormulario.add(chkLucesLED, gbc);

        gbc.gridx = 1;
        chkAlarmaAntiRobo = new JCheckBox("Alarma anti robo");
        chkAlarmaAntiRobo.setFont(fuenteLabels);
        chkAlarmaAntiRobo.setBackground(fondo);
        panelFormulario.add(chkAlarmaAntiRobo, gbc);

        // Botones
        btnRegistrar = new JButton("Registrar");
        btnRegistrar.setBackground(encabezadoColor);
        btnRegistrar.setForeground(Color.WHITE);
        btnRegistrar.setFocusPainted(false);
        btnRegistrar.setFont(fuenteBotones);

        btnCancelar = new JButton("Cancelar");
        btnCancelar.setBackground(Color.GRAY);
        btnCancelar.setForeground(Color.WHITE);
        btnCancelar.setFocusPainted(false);
        btnCancelar.setFont(fuenteBotones);

        JPanel panelBotones = new JPanel();
        panelBotones.setBackground(fondo);
        panelBotones.add(btnRegistrar);
        panelBotones.add(btnCancelar);

        gbc.gridy++;
        gbc.gridx = 0;
        gbc.gridwidth = 2;
        panelFormulario.add(panelBotones, gbc);

        add(panelFormulario, BorderLayout.CENTER);

        // Mostrar solo campos scooter inicialmente
        mostrarCamposEspecificos("Scooter");

        comboTipoVehiculo.addItemListener(e -> {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                mostrarCamposEspecificos((String) e.getItem());
            }
        });
    }

    /**
     * Muestra u oculta los campos específicos según el tipo de vehículo seleccionado.
     * 
     * @param tipo Tipo de vehículo seleccionado ("Scooter" o "Motoeléctrica").
     */
/**
 * mostrarCamposEspecificos method.
 * @param tipo parameter
 * @return result
 */
/**
 * mostrarCamposEspecificos method.
 * @param tipo parameter
 */
/**
 * mostrarCamposEspecificos method.
 * @param tipo parameter
 */
    private void mostrarCamposEspecificos(String tipo) {
        boolean esScooter = "Scooter".equals(tipo);

        chkLlantasOffRoad.setVisible(esScooter);
        chkIluminacionAvanzada.setVisible(esScooter);

        chkFrenosDisco.setVisible(!esScooter);
        chkSuspensionAlta.setVisible(!esScooter);
        chkLucesLED.setVisible(!esScooter);
        chkAlarmaAntiRobo.setVisible(!esScooter);
    }

    // Getters públicos para obtener datos
/**
 * getOwnerWindow method.
 * @return result
 */
/**
 * getOwnerWindow method.
 * @return result
 */
/**
 * getOwnerWindow method.
 * @return result
 */
    public JFrame getOwnerWindow() {
        return owner;
    }
/**
 * getTipoVehiculo method.
 * @return result
 */
/**
 * getTipoVehiculo method.
 * @return result
 */
/**
 * getTipoVehiculo method.
 * @return result
 */
    public String getTipoVehiculo() { return (String) comboTipoVehiculo.getSelectedItem(); }
/**
 * getPlaca method.
 * @return result
 */
/**
 * getPlaca method.
 * @return result
 */
/**
 * getPlaca method.
 * @return result
 */
    public String getPlaca() { return campoPlaca.getText().trim(); }
/**
 * getMarca method.
 * @return result
 */
/**
 * getMarca method.
 * @return result
 */
/**
 * getMarca method.
 * @return result
 */
    public String getMarca() { return campoMarca.getText().trim(); }
/**
 * getModelo method.
 * @return result
 */
/**
 * getModelo method.
 * @return result
 */
/**
 * getModelo method.
 * @return result
 */
    public String getModelo() { return campoModelo.getText().trim(); }

/**
 * getAutonomia method.
 * @return result
 */
/**
 * getAutonomia method.
 * @return result
 */
/**
 * getAutonomia method.
 * @return result
 */
    public double getAutonomia() {
        try { return Double.parseDouble(campoAutonomia.getText().trim()); }
        catch (NumberFormatException e) { return 0; }
    }
/**
 * getPotencia method.
 * @return result
 */
/**
 * getPotencia method.
 * @return result
 */
/**
 * getPotencia method.
 * @return result
 */
    public int getPotencia() {
        try { return Integer.parseInt(campoPotencia.getText().trim()); }
        catch (NumberFormatException e) { return 0; }
    }
/**
 * getVelocidad method.
 * @return result
 */
/**
 * getVelocidad method.
 * @return result
 */
/**
 * getVelocidad method.
 * @return result
 */
    public double getVelocidad() {
        try { return Double.parseDouble(campoVelocidad.getText().trim()); }
        catch (NumberFormatException e) { return 0; }
    }

/**
 * isLlantasOffRoad method.
 * @return result
 */
/**
 * isLlantasOffRoad method.
 * @return result
 */
/**
 * isLlantasOffRoad method.
 * @return result
 */
    public boolean isLlantasOffRoad() { return chkLlantasOffRoad.isSelected(); }
/**
 * isIluminacionAvanzada method.
 * @return result
 */
/**
 * isIluminacionAvanzada method.
 * @return result
 */
/**
 * isIluminacionAvanzada method.
 * @return result
 */
    public boolean isIluminacionAvanzada() { return chkIluminacionAvanzada.isSelected(); }
/**
 * isFrenosDisco method.
 * @return result
 */
/**
 * isFrenosDisco method.
 * @return result
 */
/**
 * isFrenosDisco method.
 * @return result
 */
    public boolean isFrenosDisco() { return chkFrenosDisco.isSelected(); }
/**
 * isSuspensionAlta method.
 * @return result
 */
/**
 * isSuspensionAlta method.
 * @return result
 */
/**
 * isSuspensionAlta method.
 * @return result
 */
    public boolean isSuspensionAlta() { return chkSuspensionAlta.isSelected(); }
/**
 * isLucesLED method.
 * @return result
 */
/**
 * isLucesLED method.
 * @return result
 */
/**
 * isLucesLED method.
 * @return result
 */
    public boolean isLucesLED() { return chkLucesLED.isSelected(); }
/**
 * isAlarmaAntiRobo method.
 * @return result
 */
/**
 * isAlarmaAntiRobo method.
 * @return result
 */
/**
 * isAlarmaAntiRobo method.
 * @return result
 */
    public boolean isAlarmaAntiRobo() { return chkAlarmaAntiRobo.isSelected(); }

/**
 * getBtnRegistrar method.
 * @return result
 */
/**
 * getBtnRegistrar method.
 * @return result
 */
/**
 * getBtnRegistrar method.
 * @return result
 */
    public JButton getBtnRegistrar() { return btnRegistrar; }
/**
 * getBtnCancelar method.
 * @return result
 */
/**
 * getBtnCancelar method.
 * @return result
 */
/**
 * getBtnCancelar method.
 * @return result
 */
    public JButton getBtnCancelar() { return btnCancelar; }

    /**
     * Limpia todos los campos y desmarca todos los checkboxes dejando el formulario vacío.
     */
/**
 * limpiarCampos method.
 * @return result
 */
/**
 * limpiarCampos method.
 */
/**
 * limpiarCampos method.
 */
    public void limpiarCampos() {
        campoPlaca.setText("");
        campoMarca.setText("");
        campoModelo.setText("");
        campoAutonomia.setText("");
        campoPotencia.setText("");
        campoVelocidad.setText("");
        chkLlantasOffRoad.setSelected(false);
        chkIluminacionAvanzada.setSelected(false);
        chkFrenosDisco.setSelected(false);
        chkSuspensionAlta.setSelected(false);
        chkLucesLED.setSelected(false);
        chkAlarmaAntiRobo.setSelected(false);
    }
}


===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/vista/VentanaSeleccionRegistroProveedor.java =====

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package udistrital.avanzada.rolapet.vista;

import javax.swing.*;
import java.awt.*;

/**
 * Class VentanaSeleccionRegistroProveedor.
 */
/**
 * Class VentanaSeleccionRegistroProveedor.
 */
public class VentanaSeleccionRegistroProveedor extends JFrame {

    private JButton btnRegistrarInsumos;
    private JButton btnRegistrarServicios;

    public VentanaSeleccionRegistroProveedor() {
        Color fondo = Color.decode("#f5f5dc");
        Color encabezadoColor = Color.decode("#b81b2f");

        setTitle("Registrar Proveedor");
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setSize(350, 220);
        setLocationRelativeTo(null);
        setLayout(new BorderLayout());

        // Panel superior con logo y título
        JPanel headerPanel = new JPanel(new BorderLayout());
        headerPanel.setBackground(fondo);
        headerPanel.setBorder(BorderFactory.createEmptyBorder(15, 15, 15, 15));

        ImageIcon logo = new ImageIcon(getClass().getResource("/imagenes/rolapet_logo.png"));
        Image img = logo.getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH);
        JLabel lblLogo = new JLabel(new ImageIcon(img));

        JLabel lblTitulo = new JLabel("Rolapet - Registro de Proveedor", SwingConstants.LEFT);
        lblTitulo.setFont(new Font("Segoe UI", Font.BOLD, 20));
        lblTitulo.setForeground(encabezadoColor);

        headerPanel.add(lblLogo, BorderLayout.WEST);
        headerPanel.add(lblTitulo, BorderLayout.CENTER);
        add(headerPanel, BorderLayout.NORTH);

        // Panel central con pregunta y botones
        JPanel panelCentral = new JPanel();
        panelCentral.setLayout(new BoxLayout(panelCentral, BoxLayout.Y_AXIS));
        panelCentral.setBackground(fondo);

        JLabel lblPregunta = new JLabel("¿Qué tipo de proveedor desea registrar?", SwingConstants.CENTER);
        lblPregunta.setFont(new Font("Segoe UI", Font.PLAIN, 16));
        lblPregunta.setForeground(encabezadoColor);
        lblPregunta.setAlignmentX(Component.CENTER_ALIGNMENT);

        btnRegistrarInsumos = new JButton("Proveedor de Insumos");
        btnRegistrarServicios = new JButton("Proveedor de Servicios");

        btnRegistrarInsumos.setAlignmentX(Component.CENTER_ALIGNMENT);
        btnRegistrarServicios.setAlignmentX(Component.CENTER_ALIGNMENT);

        btnRegistrarInsumos.setBackground(encabezadoColor);
        btnRegistrarInsumos.setForeground(Color.WHITE);
        btnRegistrarInsumos.setOpaque(true);

        btnRegistrarServicios.setBackground(encabezadoColor);
        btnRegistrarServicios.setForeground(Color.WHITE);
        btnRegistrarServicios.setOpaque(true);

        panelCentral.add(lblPregunta);
        panelCentral.add(Box.createVerticalStrut(15));
        panelCentral.add(btnRegistrarInsumos);
        panelCentral.add(Box.createVerticalStrut(10));
        panelCentral.add(btnRegistrarServicios);

        add(panelCentral, BorderLayout.CENTER);
    }

/**
 * getBtnRegistrarInsumos method.
 * @return result
 */
/**
 * getBtnRegistrarInsumos method.
 * @return result
 */
/**
 * getBtnRegistrarInsumos method.
 * @return result
 */
    public JButton getBtnRegistrarInsumos() {
        return btnRegistrarInsumos;
    }

/**
 * getBtnRegistrarServicios method.
 * @return result
 */
/**
 * getBtnRegistrarServicios method.
 * @return result
 */
/**
 * getBtnRegistrarServicios method.
 * @return result
 */
    public JButton getBtnRegistrarServicios() {
        return btnRegistrarServicios;
    }

/**
 * setControlador method.
 * @param controlador parameter
 * @return result
 */
/**
 * setControlador method.
 * @param controlador parameter
 */
/**
 * setControlador method.
 * @param controlador parameter
 */
    public void setControlador(java.awt.event.ActionListener controlador) {
        btnRegistrarInsumos.addActionListener(controlador);
        btnRegistrarServicios.addActionListener(controlador);
    }
}


===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/vista/VentanaSeleccionTipoProveedor.java =====

package udistrital.avanzada.rolapet.vista;

import javax.swing.*;
import java.awt.*;

/**
 * Class VentanaSeleccionTipoProveedor.
 */
/**
 * Class VentanaSeleccionTipoProveedor.
 */
public class VentanaSeleccionTipoProveedor extends JFrame {

    private JButton btnServicio;
    private JButton btnInsumo;

    public VentanaSeleccionTipoProveedor() {
        Color fondo = Color.decode("#f5f5dc");
        Color encabezadoColor = Color.decode("#b81b2f");

        setTitle("Seleccionar tipo de Proveedor");
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    setSize(420, 320);
        setLocationRelativeTo(null);
        setLayout(new BorderLayout());

        // Panel superior con logo y título
        JPanel headerPanel = new JPanel(new BorderLayout());
        headerPanel.setBackground(fondo);
        headerPanel.setBorder(BorderFactory.createEmptyBorder(15, 15, 15, 15));

        ImageIcon logo = new ImageIcon(getClass().getResource("/imagenes/rolapet_logo.png"));
        Image img = logo.getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH);
        JLabel lblLogo = new JLabel(new ImageIcon(img));

        JLabel lblTitulo = new JLabel("Rolapet - Selección de Proveedor", SwingConstants.LEFT);
        lblTitulo.setFont(new Font("Segoe UI", Font.BOLD, 20));
        lblTitulo.setForeground(encabezadoColor);

        headerPanel.add(lblLogo, BorderLayout.WEST);
        headerPanel.add(lblTitulo, BorderLayout.CENTER);
        add(headerPanel, BorderLayout.NORTH);

        // Panel central con pregunta y botones
        JPanel panelCentral = new JPanel();
        panelCentral.setLayout(new BoxLayout(panelCentral, BoxLayout.Y_AXIS));
        panelCentral.setBackground(fondo);

        JLabel lblPregunta = new JLabel("¿Qué tipo de proveedor eres?", SwingConstants.CENTER);
        lblPregunta.setFont(new Font("Segoe UI", Font.PLAIN, 16));
        lblPregunta.setForeground(encabezadoColor);
        lblPregunta.setAlignmentX(Component.CENTER_ALIGNMENT);

    btnServicio = new JButton("Proveedor de Servicios");
    btnInsumo = new JButton("Proveedor de Insumos");

    btnServicio.setFont(new Font("Segoe UI", Font.PLAIN, 15));
    btnServicio.setBackground(encabezadoColor);
    btnServicio.setForeground(Color.WHITE);
    btnServicio.setFocusPainted(false);
    btnServicio.setAlignmentX(Component.CENTER_ALIGNMENT);
    btnServicio.setMaximumSize(new Dimension(220, 40));

    btnInsumo.setFont(new Font("Segoe UI", Font.PLAIN, 15));
    btnInsumo.setBackground(encabezadoColor);
    btnInsumo.setForeground(Color.WHITE);
    btnInsumo.setFocusPainted(false);
    btnInsumo.setAlignmentX(Component.CENTER_ALIGNMENT);
    btnInsumo.setMaximumSize(new Dimension(220, 40));

    panelCentral.add(Box.createVerticalStrut(20));
    panelCentral.add(lblPregunta);
    panelCentral.add(Box.createVerticalStrut(25));
    panelCentral.add(btnServicio);
    panelCentral.add(Box.createVerticalStrut(15));
    panelCentral.add(btnInsumo);
    panelCentral.add(Box.createVerticalStrut(20));

    add(panelCentral, BorderLayout.CENTER);
    }

/**
 * getBtnServicio method.
 * @return result
 */
/**
 * getBtnServicio method.
 * @return result
 */
/**
 * getBtnServicio method.
 * @return result
 */
    public JButton getBtnServicio() {
        return btnServicio;
    }

/**
 * getBtnInsumo method.
 * @return result
 */
/**
 * getBtnInsumo method.
 * @return result
 */
/**
 * getBtnInsumo method.
 * @return result
 */
    public JButton getBtnInsumo() {
        return btnInsumo;
    }

/**
 * setControlador method.
 * @param controlador parameter
 * @return result
 */
/**
 * setControlador method.
 * @param controlador parameter
 */
/**
 * setControlador method.
 * @param controlador parameter
 */
    public void setControlador(java.awt.event.ActionListener controlador) {
        btnServicio.addActionListener(controlador);
        btnInsumo.addActionListener(controlador);
    }
}


===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/vista/VentanaUsuarios.java =====

package udistrital.avanzada.rolapet.vista;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionListener;

/**
 * Clase VentanaUsuarios que representa la ventana con opciones para usuarios.
 * Cuenta con botones para iniciar sesión, registrarse y regresar,
 * y presenta un diseño con logo, título y colores personalizados.
 * 
 * @author Sarita
 * @version 1.3, 25-09-2025
 */
/**
 * Class VentanaUsuarios.
 */
/**
 * Class VentanaUsuarios.
 */
public class VentanaUsuarios extends JFrame {
/**
 * JButton method.
 * @param sesión" parameter
 */
    public JButton btnIniciarSesion = new JButton("Iniciar sesión");
/**
 * JButton method.
 * @param "Registrarse" parameter
 */
    public JButton btnRegistrarse = new JButton("Registrarse");
/**
 * JButton method.
 * @param "Atrás" parameter
 */
    public JButton btnAtras = new JButton("Atrás");

    /**
     * Constructor que inicializa la ventana con sus componentes, diseño y layout.
     */
    public VentanaUsuarios() {
        Color fondo = Color.decode("#f5f5dc");
        Color encabezadoColor = Color.decode("#b81b2f");

        Font fuenteTitulo = new Font("Segoe UI", Font.BOLD, 24);

        setLayout(new BorderLayout());

        JPanel headerPanel = new JPanel(new BorderLayout());
        headerPanel.setBackground(fondo);
        headerPanel.setBorder(BorderFactory.createEmptyBorder(15, 15, 15, 15));

        ImageIcon logo = new ImageIcon(getClass().getResource("/imagenes/rolapet_logo.png"));
        Image img = logo.getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH);
        JLabel lblLogo = new JLabel(new ImageIcon(img));

        JLabel lblTitulo = new JLabel("Rolapet - Usuarios", SwingConstants.LEFT);
        lblTitulo.setFont(fuenteTitulo);
        lblTitulo.setForeground(encabezadoColor);

        headerPanel.add(lblLogo, BorderLayout.WEST);
        headerPanel.add(lblTitulo, BorderLayout.CENTER);
        add(headerPanel, BorderLayout.NORTH);

        setTitle("Ventana Usuarios");
        setSize(350, 250);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        JPanel panelBotones = new JPanel();
        panelBotones.setLayout(new BoxLayout(panelBotones, BoxLayout.Y_AXIS));
        panelBotones.setBackground(fondo);

        btnIniciarSesion.setAlignmentX(Component.CENTER_ALIGNMENT);
        btnRegistrarse.setAlignmentX(Component.CENTER_ALIGNMENT);
        btnAtras.setAlignmentX(Component.CENTER_ALIGNMENT);

        btnIniciarSesion.setBackground(encabezadoColor);
        btnIniciarSesion.setForeground(Color.WHITE);

        btnRegistrarse.setBackground(encabezadoColor);
        btnRegistrarse.setForeground(Color.WHITE);

        btnAtras.setBackground(Color.GRAY);
        btnAtras.setForeground(Color.WHITE);

        panelBotones.add(Box.createVerticalGlue());
        panelBotones.add(btnIniciarSesion);
        panelBotones.add(Box.createRigidArea(new Dimension(0, 10)));
        panelBotones.add(btnRegistrarse);
        panelBotones.add(Box.createRigidArea(new Dimension(0, 10)));
        panelBotones.add(btnAtras);
        panelBotones.add(Box.createVerticalGlue());

        getContentPane().add(panelBotones);
        setLocationRelativeTo(null);
    }

    /**
     * Asigna el mismo ActionListener controlador a los botones de la ventana.
     * 
     * @param controlador ActionListener que manejará los eventos de los botones
     */
/**
 * setControlador method.
 * @param controlador parameter
 * @return result
 */
/**
 * setControlador method.
 * @param controlador parameter
 */
/**
 * setControlador method.
 * @param controlador parameter
 */
    public void setControlador(ActionListener controlador) {
        btnIniciarSesion.addActionListener(controlador);
        btnRegistrarse.addActionListener(controlador);
        btnAtras.addActionListener(controlador);
    }
}


===== ROLAPET/src/main/java/udistrital/avanzada/rolapet/vista/VentanaVehiculosUsuario.java =====

package udistrital.avanzada.rolapet.vista;

import javax.swing.*;
import java.awt.*;
import java.util.List;
import udistrital.avanzada.rolapet.modelo.Vehiculo;

/**
 * Ventana para mostrar y gestionar los vehículos registrados por el usuario.
 */
/**
 * Class VentanaVehiculosUsuario.
 */
/**
 * Class VentanaVehiculosUsuario.
 */
public class VentanaVehiculosUsuario extends JFrame {
    private JTable tablaVehiculos;
    private JButton btnAgregarVehiculo;
    private JButton btnEditarVehiculo;
    private JButton btnEliminarVehiculo;
    private JButton btnCerrar;

    public VentanaVehiculosUsuario(List<Vehiculo> vehiculos) {
        setTitle("Mis Vehículos");
        setSize(700, 400);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setLayout(new BorderLayout());

        // Tabla de vehículos
        String[] columnas = {"Marca", "Modelo", "Placa", "Autonomía", "Potencia", "Velocidad"};
        Object[][] datos = new Object[vehiculos.size()][columnas.length];
        for (int i = 0; i < vehiculos.size(); i++) {
            Vehiculo v = vehiculos.get(i);
            datos[i][0] = v.getMarca();
            datos[i][1] = v.getModelo();
            datos[i][2] = v.getPlaca();
            datos[i][3] = v.getAutonomiaKm();
            datos[i][4] = v.getPotenciaNominalW();
            datos[i][5] = v.getVelocidadMaxKmh();
        }
        tablaVehiculos = new JTable(datos, columnas);
        JScrollPane scroll = new JScrollPane(tablaVehiculos);
        add(scroll, BorderLayout.CENTER);

        // Panel de botones
        JPanel panelBotones = new JPanel();
        btnAgregarVehiculo = new JButton("Agregar Vehículo");
        btnEditarVehiculo = new JButton("Editar Vehículo");
        btnEliminarVehiculo = new JButton("Eliminar Vehículo");
        btnCerrar = new JButton("Cerrar");
        panelBotones.add(btnAgregarVehiculo);
        panelBotones.add(btnEditarVehiculo);
        panelBotones.add(btnEliminarVehiculo);
        panelBotones.add(btnCerrar);
        add(panelBotones, BorderLayout.SOUTH);
    }

/**
 * getBtnAgregarVehiculo method.
 * @return result
 */
/**
 * getBtnAgregarVehiculo method.
 * @return result
 */
/**
 * getBtnAgregarVehiculo method.
 * @return result
 */
    public JButton getBtnAgregarVehiculo() { return btnAgregarVehiculo; }
/**
 * getBtnEditarVehiculo method.
 * @return result
 */
/**
 * getBtnEditarVehiculo method.
 * @return result
 */
/**
 * getBtnEditarVehiculo method.
 * @return result
 */
    public JButton getBtnEditarVehiculo() { return btnEditarVehiculo; }
/**
 * getBtnEliminarVehiculo method.
 * @return result
 */
/**
 * getBtnEliminarVehiculo method.
 * @return result
 */
/**
 * getBtnEliminarVehiculo method.
 * @return result
 */
    public JButton getBtnEliminarVehiculo() { return btnEliminarVehiculo; }
/**
 * getBtnCerrar method.
 * @return result
 */
/**
 * getBtnCerrar method.
 * @return result
 */
/**
 * getBtnCerrar method.
 * @return result
 */
    public JButton getBtnCerrar() { return btnCerrar; }
/**
 * getTablaVehiculos method.
 * @return result
 */
/**
 * getTablaVehiculos method.
 * @return result
 */
/**
 * getTablaVehiculos method.
 * @return result
 */
    public JTable getTablaVehiculos() { return tablaVehiculos; }
}
